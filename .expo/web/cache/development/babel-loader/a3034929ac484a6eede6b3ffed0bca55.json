{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"colors\", \"locations\", \"start\", \"end\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport NativeLinearGradient from \"./NativeLinearGradient\";\nexport var LinearGradient = function (_React$Component) {\n  _inherits(LinearGradient, _React$Component);\n  var _super = _createSuper(LinearGradient);\n  function LinearGradient() {\n    _classCallCheck(this, LinearGradient);\n    return _super.apply(this, arguments);\n  }\n  _createClass(LinearGradient, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        colors = _this$props.colors,\n        locations = _this$props.locations,\n        start = _this$props.start,\n        end = _this$props.end,\n        props = _objectWithoutProperties(_this$props, _excluded);\n      var resolvedLocations = locations;\n      if (locations && colors.length !== locations.length) {\n        console.warn('LinearGradient colors and locations props should be arrays of the same length');\n        resolvedLocations = locations.slice(0, colors.length);\n      }\n      return React.createElement(NativeLinearGradient, _objectSpread(_objectSpread({}, props), {}, {\n        colors: Platform.select({\n          web: colors,\n          default: colors.map(processColor)\n        }),\n        locations: resolvedLocations,\n        startPoint: _normalizePoint(start),\n        endPoint: _normalizePoint(end)\n      }));\n    }\n  }]);\n  return LinearGradient;\n}(React.Component);\nfunction _normalizePoint(point) {\n  if (!point) {\n    return undefined;\n  }\n  if (Array.isArray(point) && point.length !== 2) {\n    console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');\n    return undefined;\n  }\n  return Array.isArray(point) ? point : [point.x, point.y];\n}","map":{"version":3,"sources":["../src/LinearGradient.tsx"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO;AAAC;AAAA;AAG/B,OAAO,oBAAoB;AA8D3B,WAAa,cAAe;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAC1B,kBAAM;MACJ,kBAAoD,IAAI,CAAC,KAAK;QAAtD,MAAM,eAAN,MAAM;QAAE,SAAS,eAAT,SAAS;QAAE,KAAK,eAAL,KAAK;QAAE,GAAG,eAAH,GAAG;QAAK,KAAK;MAC/C,IAAI,iBAAiB,GAAG,SAAS;MACjC,IAAI,SAAS,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;QACnD,OAAO,CAAC,IAAI,CAAC,+EAA+E,CAAC;QAC7F,iBAAiB,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC;MACtD;MAED,OACE,KAAA,CAAA,aAAA,CAAC,oBAAoB,kCACf,KAAK;QACT,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC;UACtB,GAAG,EAAE,MAAa;UAClB,OAAO,EAAE,MAAM,CAAC,GAAG,CAAC,YAAY;SACjC,CAAC;QACF,SAAS,EAAE,iBAAiB;QAC5B,UAAU,EAAE,eAAe,CAAC,KAAK,CAAC;QAClC,QAAQ,EAAE,eAAe,CAAC,GAAG;MAAC,GAC9B;IAEN;EAAC;EAAA;AAAA,EArBiC,KAAK,CAAC,SAA8B;AAwBxE,SAAS,eAAe,CACtB,KAA6C,EAAA;EAE7C,IAAI,CAAC,KAAK,EAAE;IACV,OAAO,SAAS;EACjB;EAED,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;IAC9C,OAAO,CAAC,IAAI,CAAC,8EAA8E,CAAC;IAC5F,OAAO,SAAS;EACjB;EAED,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;AAC1D","sourcesContent":["import * as React from 'react';\nimport { Platform, processColor, ViewProps } from 'react-native';\n\nimport NativeLinearGradient from './NativeLinearGradient';\nimport { NativeLinearGradientPoint } from './NativeLinearGradient.types';\n\n// @needsAudit\n/**\n * An object `{ x: number; y: number }` or array `[x, y]` that represents the point\n * at which the gradient starts or ends, as a fraction of the overall size of the gradient ranging\n * from `0` to `1`, inclusive.\n */\nexport type LinearGradientPoint =\n  | {\n      /**\n       * A number ranging from `0` to `1`, representing the position of gradient transformation.\n       */\n      x: number;\n      /**\n       * A number ranging from `0` to `1`, representing the position of gradient transformation.\n       */\n      y: number;\n    }\n  | NativeLinearGradientPoint;\n\n// @needsAudit\nexport type LinearGradientProps = ViewProps & {\n  /**\n   * An array of colors that represent stops in the gradient. At least two colors are required\n   * (for a single-color background, use the `style.backgroundColor` prop on a `View` component).\n   */\n  colors: string[];\n  /**\n   * An array that contains `number`s ranging from `0` to `1`, inclusive, and is the same length as the `colors` property.\n   * Each number indicates a color-stop location where each respective color should be located.\n   * If not specified, the colors will be distributed evenly across the gradient.\n   *\n   * For example, `[0.5, 0.8]` would render:\n   * - the first color, solid, from the beginning of the gradient view to 50% through (the middle);\n   * - a gradient from the first color to the second from the 50% point to the 80% point; and\n   * - the second color, solid, from the 80% point to the end of the gradient view.\n   *\n   * > The color-stop locations must be ascending from least to greatest.\n   * @default []\n   */\n  locations?: number[] | null;\n  /**\n   * For example, `{ x: 0.1, y: 0.2 }` means that the gradient will start `10%` from the left and `20%` from the top.\n   *\n   * **On web**, this only changes the angle of the gradient because CSS gradients don't support changing the starting position.\n   * @default { x: 0.5, y: 0.0 }\n   */\n  start?: LinearGradientPoint | null;\n  /**\n   * For example, `{ x: 0.1, y: 0.2 }` means that the gradient will end `10%` from the left and `20%` from the bottom.\n   *\n   * **On web**, this only changes the angle of the gradient because CSS gradients don't support changing the end position.\n   * @default { x: 0.5, y: 1.0 }\n   */\n  end?: LinearGradientPoint | null;\n};\n\n/**\n * Renders a native view that transitions between multiple colors in a linear direction.\n */\nexport class LinearGradient extends React.Component<LinearGradientProps> {\n  render() {\n    const { colors, locations, start, end, ...props } = this.props;\n    let resolvedLocations = locations;\n    if (locations && colors.length !== locations.length) {\n      console.warn('LinearGradient colors and locations props should be arrays of the same length');\n      resolvedLocations = locations.slice(0, colors.length);\n    }\n\n    return (\n      <NativeLinearGradient\n        {...props}\n        colors={Platform.select({\n          web: colors as any,\n          default: colors.map(processColor),\n        })}\n        locations={resolvedLocations}\n        startPoint={_normalizePoint(start)}\n        endPoint={_normalizePoint(end)}\n      />\n    );\n  }\n}\n\nfunction _normalizePoint(\n  point: LinearGradientPoint | null | undefined\n): NativeLinearGradientPoint | undefined {\n  if (!point) {\n    return undefined;\n  }\n\n  if (Array.isArray(point) && point.length !== 2) {\n    console.warn('start and end props for LinearGradient must be of the format [x,y] or {x, y}');\n    return undefined;\n  }\n\n  return Array.isArray(point) ? point : [point.x, point.y];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}