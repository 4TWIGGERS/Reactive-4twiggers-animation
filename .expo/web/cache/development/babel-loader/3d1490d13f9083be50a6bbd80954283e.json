{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"numberOfPointers\", \"direction\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport Hammer from '@egjs/hammerjs';\nimport { Direction } from \"./constants\";\nimport { GesturePropError } from \"./Errors\";\nimport DraggingGestureHandler from \"./DraggingGestureHandler\";\nimport { isnan } from \"./utils\";\nvar FlingGestureHandler = function (_DraggingGestureHandl) {\n  _inherits(FlingGestureHandler, _DraggingGestureHandl);\n  var _super = _createSuper(FlingGestureHandler);\n  function FlingGestureHandler() {\n    _classCallCheck(this, FlingGestureHandler);\n    return _super.apply(this, arguments);\n  }\n  _createClass(FlingGestureHandler, [{\n    key: \"name\",\n    get: function get() {\n      return 'swipe';\n    }\n  }, {\n    key: \"NativeGestureClass\",\n    get: function get() {\n      return Hammer.Swipe;\n    }\n  }, {\n    key: \"onGestureActivated\",\n    value: function onGestureActivated(event) {\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_MOVE,\n        isFinal: false,\n        isFirst: true\n      }));\n      this.isGestureRunning = false;\n      this.hasGestureFailed = false;\n      this.sendEvent(_objectSpread(_objectSpread({}, event), {}, {\n        eventType: Hammer.INPUT_END,\n        isFinal: true\n      }));\n    }\n  }, {\n    key: \"onRawEvent\",\n    value: function onRawEvent(ev) {\n      var _this = this;\n      _get(_getPrototypeOf(FlingGestureHandler.prototype), \"onRawEvent\", this).call(this, ev);\n      if (this.hasGestureFailed) {\n        return;\n      }\n      if (ev.isFinal) {\n        setTimeout(function () {\n          if (_this.isGestureRunning) {\n            _this.cancelEvent(ev);\n          }\n        });\n      } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n        var gesture = this.hammer.get(this.name);\n        if (gesture.options.enable(gesture, ev)) {\n          this.onStart(ev);\n          this.sendEvent(ev);\n        }\n      }\n    }\n  }, {\n    key: \"getHammerConfig\",\n    value: function getHammerConfig() {\n      return {\n        pointers: this.config.numberOfPointers,\n        direction: this.getDirection()\n      };\n    }\n  }, {\n    key: \"getTargetDirections\",\n    value: function getTargetDirections(direction) {\n      var directions = [];\n      if (direction & Direction.RIGHT) {\n        directions.push(Hammer.DIRECTION_RIGHT);\n      }\n      if (direction & Direction.LEFT) {\n        directions.push(Hammer.DIRECTION_LEFT);\n      }\n      if (direction & Direction.UP) {\n        directions.push(Hammer.DIRECTION_UP);\n      }\n      if (direction & Direction.DOWN) {\n        directions.push(Hammer.DIRECTION_DOWN);\n      }\n      return directions;\n    }\n  }, {\n    key: \"getDirection\",\n    value: function getDirection() {\n      var _this$getConfig = this.getConfig(),\n        direction = _this$getConfig.direction;\n      var directions = [];\n      if (direction & Direction.RIGHT) {\n        directions.push(Hammer.DIRECTION_HORIZONTAL);\n      }\n      if (direction & Direction.LEFT) {\n        directions.push(Hammer.DIRECTION_HORIZONTAL);\n      }\n      if (direction & Direction.UP) {\n        directions.push(Hammer.DIRECTION_VERTICAL);\n      }\n      if (direction & Direction.DOWN) {\n        directions.push(Hammer.DIRECTION_VERTICAL);\n      }\n      directions = _toConsumableArray(new Set(directions));\n      if (directions.length === 0) return Hammer.DIRECTION_NONE;\n      if (directions.length === 1) return directions[0];\n      return Hammer.DIRECTION_ALL;\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref, _recognizer, _ref2) {\n      var numberOfPointers = _ref.numberOfPointers;\n      var pointerLength = _ref2.maxPointers;\n      var validPointerCount = pointerLength === numberOfPointers;\n      if (!validPointerCount && this.isGestureRunning) {\n        return {\n          failed: true\n        };\n      }\n      return {\n        success: validPointerCount\n      };\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref3) {\n      var _ref3$numberOfPointer = _ref3.numberOfPointers,\n        numberOfPointers = _ref3$numberOfPointer === void 0 ? 1 : _ref3$numberOfPointer,\n        direction = _ref3.direction,\n        props = _objectWithoutProperties(_ref3, _excluded);\n      if (isnan(direction) || typeof direction !== 'number') {\n        throw new GesturePropError('direction', direction, 'number');\n      }\n      return _get(_getPrototypeOf(FlingGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        numberOfPointers: numberOfPointers,\n        direction: direction\n      }, props));\n    }\n  }]);\n  return FlingGestureHandler;\n}(DraggingGestureHandler);\nexport default FlingGestureHandler;","map":{"version":3,"sources":["FlingGestureHandler.ts"],"names":["Hammer","Direction","GesturePropError","DraggingGestureHandler","isnan","FlingGestureHandler","name","NativeGestureClass","Swipe","onGestureActivated","event","sendEvent","eventType","INPUT_MOVE","isFinal","isFirst","isGestureRunning","hasGestureFailed","INPUT_END","onRawEvent","ev","setTimeout","cancelEvent","gesture","hammer","get","options","enable","onStart","getHammerConfig","pointers","config","numberOfPointers","direction","getDirection","getTargetDirections","directions","RIGHT","push","DIRECTION_RIGHT","LEFT","DIRECTION_LEFT","UP","DIRECTION_UP","DOWN","DIRECTION_DOWN","getConfig","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","Set","length","DIRECTION_NONE","DIRECTION_ALL","isGestureEnabledForEvent","_recognizer","maxPointers","pointerLength","validPointerCount","failed","success","updateGestureConfig","props"],"mappings":"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","sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\n\nimport { Direction } from './constants';\nimport { GesturePropError } from './Errors';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan } from './utils';\nimport { HammerInputExt } from './GestureHandler';\n\nclass FlingGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'swipe';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Swipe;\n  }\n\n  onGestureActivated(event: HammerInputExt) {\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_MOVE,\n      isFinal: false,\n      isFirst: true,\n    });\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_END,\n      isFinal: true,\n    });\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore FIXME(TS)\n      if (gesture.options.enable(gesture, ev)) {\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      // @ts-ignore FIXME(TS)\n      pointers: this.config.numberOfPointers,\n      direction: this.getDirection(),\n    };\n  }\n\n  getTargetDirections(direction: number) {\n    const directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_RIGHT);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_LEFT);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_UP);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_DOWN);\n    }\n    // const hammerDirection = directions.reduce((a, b) => a | b, 0);\n    return directions;\n  }\n\n  getDirection() {\n    // @ts-ignore FIXME(TS)\n    const { direction } = this.getConfig();\n\n    let directions = [];\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n    directions = [...new Set(directions)];\n\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\n    if (directions.length === 1) return directions[0];\n    return Hammer.DIRECTION_ALL;\n  }\n\n  isGestureEnabledForEvent(\n    { numberOfPointers }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength }: any\n  ) {\n    const validPointerCount = pointerLength === numberOfPointers;\n    if (!validPointerCount && this.isGestureRunning) {\n      return { failed: true };\n    }\n    return { success: validPointerCount };\n  }\n\n  updateGestureConfig({ numberOfPointers = 1, direction, ...props }: any) {\n    if (isnan(direction) || typeof direction !== 'number') {\n      throw new GesturePropError('direction', direction, 'number');\n    }\n    return super.updateGestureConfig({\n      numberOfPointers,\n      direction,\n      ...props,\n    });\n  }\n}\n\nexport default FlingGestureHandler;\n"]},"metadata":{},"sourceType":"module"}