{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar MapperRegistry = function () {\n  function MapperRegistry(module) {\n    _classCallCheck(this, MapperRegistry);\n    this.sortedMappers = [];\n    this.mappers = new Map();\n    this.updatedSinceLastExecute = false;\n    this._module = module;\n  }\n  _createClass(MapperRegistry, [{\n    key: \"startMapper\",\n    value: function startMapper(mapper) {\n      this.mappers.set(mapper.id, mapper);\n      this.updatedSinceLastExecute = true;\n      return mapper.id;\n    }\n  }, {\n    key: \"stopMapper\",\n    value: function stopMapper(id) {\n      this.mappers.delete(id);\n      this.updatedSinceLastExecute = true;\n    }\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      if (this.updatedSinceLastExecute) {\n        this.updateOrder();\n        this.updatedSinceLastExecute = false;\n      }\n      for (var i = 0, len = this.sortedMappers.length; i < len; ++i) {\n        var mapper = this.sortedMappers[i];\n        if (mapper.dirty) {\n          mapper.execute();\n        }\n      }\n    }\n  }, {\n    key: \"updateOrder\",\n    value: function updateOrder() {\n      var nodes = _toConsumableArray(this.mappers.values()).map(function (mapper) {\n        return new Node(mapper);\n      });\n      var mappersById = {};\n      this.mappers.forEach(function (mapper) {\n        mappersById[mapper.id] = mapper;\n      });\n      for (var i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {\n        var node = nodes[i];\n        if (node.mapper.outputs.length === 0) {\n          continue;\n        }\n        for (var j = 0; j < nodesLen; ++j) {\n          var restNode = nodes[j];\n          if (i === j || restNode.mapper.inputs.length === 0) {\n            continue;\n          }\n          for (var outi = 0, outputsLen = node.mapper.outputs.length; outi < outputsLen; ++outi) {\n            for (var resti = 0, restLen = restNode.mapper.inputs.length; resti < restLen; ++resti) {\n              if (node.mapper.outputs[outi]._id === restNode.mapper.inputs[resti]._id) {\n                node.children.push(restNode);\n              }\n            }\n          }\n        }\n      }\n      var post = {};\n      var postCounter = 1;\n      var dfs = function dfs(node) {\n        var index = nodes.indexOf(node);\n        if (index === -1) {\n          return;\n        }\n        ++postCounter;\n        nodes.splice(index, 1);\n        if (node.children.length === 0 && nodes.length > 0) {\n          post[node.mapper.id] = postCounter++;\n          dfs(nodes[0]);\n          return;\n        }\n        for (var _i = 0, len = node.children.length; _i < len; ++_i) {\n          dfs(node.children[_i]);\n        }\n        post[node.mapper.id] = postCounter++;\n      };\n      while (nodes.length) {\n        dfs(nodes[0]);\n      }\n      var postArray = Object.keys(post).map(function (key) {\n        var num = parseInt(key);\n        return [num, post[num]];\n      });\n      postArray.sort(function (a, b) {\n        return b[1] - a[1];\n      });\n      this.sortedMappers = [];\n      for (var _i2 = 0, len = postArray.length; _i2 < len; ++_i2) {\n        var _postArray$_i = _slicedToArray(postArray[_i2], 1),\n          id = _postArray$_i[0];\n        this.sortedMappers.push(mappersById[id]);\n      }\n    }\n  }, {\n    key: \"needRunOnRender\",\n    get: function get() {\n      return this.updatedSinceLastExecute;\n    }\n  }]);\n  return MapperRegistry;\n}();\nexport { MapperRegistry as default };\nvar Node = _createClass(function Node(mapper) {\n  var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  _classCallCheck(this, Node);\n  this.mapper = mapper;\n  this.children = children;\n});","map":{"version":3,"names":["MapperRegistry","module","sortedMappers","mappers","Map","updatedSinceLastExecute","_module","mapper","set","id","delete","updateOrder","i","len","length","dirty","execute","nodes","values","map","Node","mappersById","forEach","nodesLen","node","outputs","j","restNode","inputs","outi","outputsLen","resti","restLen","_id","children","push","post","postCounter","dfs","index","indexOf","splice","postArray","Object","keys","key","num","parseInt","sort","a","b"],"sources":["/Users/jeko/Documents/Reactive-4twiggers-animation/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/MapperRegistry.js"],"sourcesContent":["export default class MapperRegistry {\n    constructor(module) {\n        this.sortedMappers = [];\n        this.mappers = new Map();\n        this.updatedSinceLastExecute = false;\n        this._module = module;\n    }\n    startMapper(mapper) {\n        this.mappers.set(mapper.id, mapper);\n        this.updatedSinceLastExecute = true;\n        return mapper.id;\n    }\n    stopMapper(id) {\n        this.mappers.delete(id);\n        this.updatedSinceLastExecute = true;\n    }\n    execute() {\n        if (this.updatedSinceLastExecute) {\n            this.updateOrder();\n            this.updatedSinceLastExecute = false;\n        }\n        for (let i = 0, len = this.sortedMappers.length; i < len; ++i) {\n            const mapper = this.sortedMappers[i];\n            if (mapper.dirty) {\n                mapper.execute();\n            }\n        }\n    }\n    updateOrder() {\n        const nodes = [...this.mappers.values()].map((mapper) => new Node(mapper));\n        const mappersById = {};\n        this.mappers.forEach((mapper) => {\n            mappersById[mapper.id] = mapper;\n        });\n        // create a graph from array of nodes\n        for (let i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {\n            const node = nodes[i];\n            if (node.mapper.outputs.length === 0) {\n                continue;\n            }\n            for (let j = 0; j < nodesLen; ++j) {\n                const restNode = nodes[j];\n                if (i === j || restNode.mapper.inputs.length === 0) {\n                    continue;\n                }\n                for (let outi = 0, outputsLen = node.mapper.outputs.length; outi < outputsLen; ++outi) {\n                    for (let resti = 0, restLen = restNode.mapper.inputs.length; resti < restLen; ++resti) {\n                        if (node.mapper.outputs[outi]._id ===\n                            restNode.mapper.inputs[resti]._id) {\n                            node.children.push(restNode);\n                        }\n                    }\n                }\n            }\n        }\n        const post = {};\n        let postCounter = 1;\n        const dfs = (node) => {\n            const index = nodes.indexOf(node);\n            if (index === -1) {\n                // this node has already been handled\n                return;\n            }\n            ++postCounter;\n            nodes.splice(index, 1);\n            if (node.children.length === 0 && nodes.length > 0) {\n                post[node.mapper.id] = postCounter++;\n                dfs(nodes[0]);\n                return;\n            }\n            for (let i = 0, len = node.children.length; i < len; ++i) {\n                dfs(node.children[i]);\n            }\n            post[node.mapper.id] = postCounter++;\n        };\n        while (nodes.length)\n            dfs(nodes[0]);\n        const postArray = Object.keys(post).map((key) => {\n            const num = parseInt(key);\n            return [num, post[num]];\n        });\n        postArray.sort((a, b) => {\n            return b[1] - a[1];\n        });\n        // clear sorted mappers\n        this.sortedMappers = [];\n        for (let i = 0, len = postArray.length; i < len; ++i) {\n            const [id] = postArray[i];\n            this.sortedMappers.push(mappersById[id]);\n        }\n    }\n    get needRunOnRender() {\n        return this.updatedSinceLastExecute;\n    }\n}\nclass Node {\n    constructor(mapper, children = []) {\n        this.mapper = mapper;\n        this.children = children;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}