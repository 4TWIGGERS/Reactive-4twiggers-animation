{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport * as React from 'react';\nimport { Component } from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport { PanGestureHandler } from \"../handlers/PanGestureHandler\";\nimport { TapGestureHandler } from \"../handlers/TapGestureHandler\";\nimport { State } from \"../State\";\nvar DRAG_TOSS = 0.05;\nvar Swipeable = function (_Component) {\n  _inherits(Swipeable, _Component);\n  var _super = _createSuper(Swipeable);\n  function Swipeable(_props) {\n    var _this;\n    _classCallCheck(this, Swipeable);\n    _this = _super.call(this, _props);\n    _defineProperty(_assertThisInitialized(_this), \"onGestureEvent\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"transX\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"showLeftAction\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"leftActionTranslate\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"showRightAction\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"rightActionTranslate\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"updateAnimatedEvent\", function (props, state) {\n      var friction = props.friction,\n        overshootFriction = props.overshootFriction;\n      var dragX = state.dragX,\n        rowTranslation = state.rowTranslation,\n        _state$leftWidth = state.leftWidth,\n        leftWidth = _state$leftWidth === void 0 ? 0 : _state$leftWidth,\n        _state$rowWidth = state.rowWidth,\n        rowWidth = _state$rowWidth === void 0 ? 0 : _state$rowWidth;\n      var _state$rightOffset = state.rightOffset,\n        rightOffset = _state$rightOffset === void 0 ? rowWidth : _state$rightOffset;\n      var rightWidth = Math.max(0, rowWidth - rightOffset);\n      var _props$overshootLeft = props.overshootLeft,\n        overshootLeft = _props$overshootLeft === void 0 ? leftWidth > 0 : _props$overshootLeft,\n        _props$overshootRight = props.overshootRight,\n        overshootRight = _props$overshootRight === void 0 ? rightWidth > 0 : _props$overshootRight;\n      var transX = Animated.add(rowTranslation, dragX.interpolate({\n        inputRange: [0, friction],\n        outputRange: [0, 1]\n      })).interpolate({\n        inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n        outputRange: [-rightWidth - (overshootRight ? 1 / overshootFriction : 0), -rightWidth, leftWidth, leftWidth + (overshootLeft ? 1 / overshootFriction : 0)]\n      });\n      _this.transX = transX;\n      _this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n        inputRange: [-1, 0, leftWidth],\n        outputRange: [0, 0, 1]\n      }) : new Animated.Value(0);\n      _this.leftActionTranslate = _this.showLeftAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n      _this.showRightAction = rightWidth > 0 ? transX.interpolate({\n        inputRange: [-rightWidth, 0, 1],\n        outputRange: [1, 0, 0]\n      }) : new Animated.Value(0);\n      _this.rightActionTranslate = _this.showRightAction.interpolate({\n        inputRange: [0, Number.MIN_VALUE],\n        outputRange: [-10000, 0],\n        extrapolate: 'clamp'\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onTapHandlerStateChange\", function (_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      if (nativeEvent.oldState === State.ACTIVE) {\n        _this.close();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onHandlerStateChange\", function (ev) {\n      if (ev.nativeEvent.oldState === State.ACTIVE) {\n        _this.handleRelease(ev);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleRelease\", function (ev) {\n      var _ev$nativeEvent = ev.nativeEvent,\n        velocityX = _ev$nativeEvent.velocityX,\n        dragX = _ev$nativeEvent.translationX;\n      var _this$state = _this.state,\n        _this$state$leftWidth = _this$state.leftWidth,\n        leftWidth = _this$state$leftWidth === void 0 ? 0 : _this$state$leftWidth,\n        _this$state$rowWidth = _this$state.rowWidth,\n        rowWidth = _this$state$rowWidth === void 0 ? 0 : _this$state$rowWidth,\n        rowState = _this$state.rowState;\n      var _this$state$rightOffs = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs === void 0 ? rowWidth : _this$state$rightOffs;\n      var rightWidth = rowWidth - rightOffset;\n      var _this$props5 = _this.props,\n        friction = _this$props5.friction,\n        _this$props5$leftThre = _this$props5.leftThreshold,\n        leftThreshold = _this$props5$leftThre === void 0 ? leftWidth / 2 : _this$props5$leftThre,\n        _this$props5$rightThr = _this$props5.rightThreshold,\n        rightThreshold = _this$props5$rightThr === void 0 ? rightWidth / 2 : _this$props5$rightThr;\n      var startOffsetX = _this.currentOffset() + dragX / friction;\n      var translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n      var toValue = 0;\n      if (rowState === 0) {\n        if (translationX > leftThreshold) {\n          toValue = leftWidth;\n        } else if (translationX < -rightThreshold) {\n          toValue = -rightWidth;\n        }\n      } else if (rowState === 1) {\n        if (translationX > -leftThreshold) {\n          toValue = leftWidth;\n        }\n      } else {\n        if (translationX < rightThreshold) {\n          toValue = -rightWidth;\n        }\n      }\n      _this.animateRow(startOffsetX, toValue, velocityX / friction);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"animateRow\", function (fromValue, toValue, velocityX) {\n      var _this$state2 = _this.state,\n        dragX = _this$state2.dragX,\n        rowTranslation = _this$state2.rowTranslation;\n      dragX.setValue(0);\n      rowTranslation.setValue(fromValue);\n      _this.setState({\n        rowState: Math.sign(toValue)\n      });\n      Animated.spring(rowTranslation, _objectSpread({\n        restSpeedThreshold: 1.7,\n        restDisplacementThreshold: 0.4,\n        velocity: velocityX,\n        bounciness: 0,\n        toValue: toValue,\n        useNativeDriver: _this.props.useNativeAnimations\n      }, _this.props.animationOptions)).start(function (_ref2) {\n        var finished = _ref2.finished;\n        if (finished) {\n          if (toValue > 0 && _this.props.onSwipeableLeftOpen) {\n            _this.props.onSwipeableLeftOpen();\n          } else if (toValue < 0 && _this.props.onSwipeableRightOpen) {\n            _this.props.onSwipeableRightOpen();\n          }\n          if (toValue === 0) {\n            var _this$props$onSwipeab, _this$props;\n            (_this$props$onSwipeab = (_this$props = _this.props).onSwipeableClose) === null || _this$props$onSwipeab === void 0 ? void 0 : _this$props$onSwipeab.call(_this$props);\n          } else {\n            var _this$props$onSwipeab2, _this$props2;\n            (_this$props$onSwipeab2 = (_this$props2 = _this.props).onSwipeableOpen) === null || _this$props$onSwipeab2 === void 0 ? void 0 : _this$props$onSwipeab2.call(_this$props2);\n          }\n        }\n      });\n      if (toValue > 0 && _this.props.onSwipeableLeftWillOpen) {\n        _this.props.onSwipeableLeftWillOpen();\n      } else if (toValue < 0 && _this.props.onSwipeableRightWillOpen) {\n        _this.props.onSwipeableRightWillOpen();\n      }\n      if (toValue === 0) {\n        var _this$props$onSwipeab3, _this$props3;\n        (_this$props$onSwipeab3 = (_this$props3 = _this.props).onSwipeableWillClose) === null || _this$props$onSwipeab3 === void 0 ? void 0 : _this$props$onSwipeab3.call(_this$props3);\n      } else {\n        var _this$props$onSwipeab4, _this$props4;\n        (_this$props$onSwipeab4 = (_this$props4 = _this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab4 === void 0 ? void 0 : _this$props$onSwipeab4.call(_this$props4);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onRowLayout\", function (_ref3) {\n      var nativeEvent = _ref3.nativeEvent;\n      _this.setState({\n        rowWidth: nativeEvent.layout.width\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"currentOffset\", function () {\n      var _this$state3 = _this.state,\n        _this$state3$leftWidt = _this$state3.leftWidth,\n        leftWidth = _this$state3$leftWidt === void 0 ? 0 : _this$state3$leftWidt,\n        _this$state3$rowWidth = _this$state3.rowWidth,\n        rowWidth = _this$state3$rowWidth === void 0 ? 0 : _this$state3$rowWidth,\n        rowState = _this$state3.rowState;\n      var _this$state$rightOffs2 = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs2 === void 0 ? rowWidth : _this$state$rightOffs2;\n      var rightWidth = rowWidth - rightOffset;\n      if (rowState === 1) {\n        return leftWidth;\n      } else if (rowState === -1) {\n        return -rightWidth;\n      }\n      return 0;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"close\", function () {\n      _this.animateRow(_this.currentOffset(), 0);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"openLeft\", function () {\n      var _this$state$leftWidth2 = _this.state.leftWidth,\n        leftWidth = _this$state$leftWidth2 === void 0 ? 0 : _this$state$leftWidth2;\n      _this.animateRow(_this.currentOffset(), leftWidth);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"openRight\", function () {\n      var _this$state$rowWidth2 = _this.state.rowWidth,\n        rowWidth = _this$state$rowWidth2 === void 0 ? 0 : _this$state$rowWidth2;\n      var _this$state$rightOffs3 = _this.state.rightOffset,\n        rightOffset = _this$state$rightOffs3 === void 0 ? rowWidth : _this$state$rightOffs3;\n      var rightWidth = rowWidth - rightOffset;\n      _this.animateRow(_this.currentOffset(), -rightWidth);\n    });\n    var _dragX = new Animated.Value(0);\n    _this.state = {\n      dragX: _dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined\n    };\n    _this.updateAnimatedEvent(_props, _this.state);\n    _this.onGestureEvent = Animated.event([{\n      nativeEvent: {\n        translationX: _dragX\n      }\n    }], {\n      useNativeDriver: _props.useNativeAnimations\n    });\n    return _this;\n  }\n  _createClass(Swipeable, [{\n    key: \"UNSAFE_componentWillUpdate\",\n    value: function UNSAFE_componentWillUpdate(props, state) {\n      if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n        this.updateAnimatedEvent(props, state);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var rowState = this.state.rowState;\n      var _this$props6 = this.props,\n        children = _this$props6.children,\n        renderLeftActions = _this$props6.renderLeftActions,\n        renderRightActions = _this$props6.renderRightActions;\n      var left = renderLeftActions && React.createElement(Animated.View, {\n        style: [styles.leftActions, {\n          transform: [{\n            translateX: this.leftActionTranslate\n          }]\n        }]\n      }, renderLeftActions(this.showLeftAction, this.transX), React.createElement(View, {\n        onLayout: function onLayout(_ref4) {\n          var nativeEvent = _ref4.nativeEvent;\n          return _this2.setState({\n            leftWidth: nativeEvent.layout.x\n          });\n        }\n      }));\n      var right = renderRightActions && React.createElement(Animated.View, {\n        style: [styles.rightActions, {\n          transform: [{\n            translateX: this.rightActionTranslate\n          }]\n        }]\n      }, renderRightActions(this.showRightAction, this.transX), React.createElement(View, {\n        onLayout: function onLayout(_ref5) {\n          var nativeEvent = _ref5.nativeEvent;\n          return _this2.setState({\n            rightOffset: nativeEvent.layout.x\n          });\n        }\n      }));\n      return React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-10, 10]\n      }, this.props, {\n        onGestureEvent: this.onGestureEvent,\n        onHandlerStateChange: this.onHandlerStateChange\n      }), React.createElement(Animated.View, {\n        onLayout: this.onRowLayout,\n        style: [styles.container, this.props.containerStyle]\n      }, left, right, React.createElement(TapGestureHandler, {\n        enabled: rowState !== 0,\n        onHandlerStateChange: this.onTapHandlerStateChange\n      }, React.createElement(Animated.View, {\n        pointerEvents: rowState === 0 ? 'auto' : 'box-only',\n        style: [{\n          transform: [{\n            translateX: this.transX\n          }]\n        }, this.props.childrenContainerStyle]\n      }, children))));\n    }\n  }]);\n  return Swipeable;\n}(Component);\nexport { Swipeable as default };\n_defineProperty(Swipeable, \"defaultProps\", {\n  friction: 1,\n  overshootFriction: 1,\n  useNativeAnimations: true\n});\nvar styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  leftActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row'\n  }),\n  rightActions: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse'\n  })\n});","map":{"version":3,"mappings":"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","names":["React","Component","PanGestureHandler","TapGestureHandler","State","DRAG_TOSS","Swipeable","constructor","props","_defineProperty","state","friction","overshootFriction","dragX","rowTranslation","leftWidth","rowWidth","rightOffset","rightWidth","Math","max","overshootLeft","overshootRight","transX","Animated","add","interpolate","inputRange","outputRange","showLeftAction","Value","leftActionTranslate","Number","MIN_VALUE","extrapolate","showRightAction","rightActionTranslate","nativeEvent","oldState","ACTIVE","close","ev","handleRelease","velocityX","translationX","rowState","leftThreshold","rightThreshold","startOffsetX","currentOffset","toValue","animateRow","fromValue","setValue","setState","sign","spring","restSpeedThreshold","restDisplacementThreshold","velocity","bounciness","useNativeDriver","useNativeAnimations","animationOptions","start","finished","onSwipeableLeftOpen","onSwipeableRightOpen","onSwipeableClose","onSwipeableOpen","onSwipeableLeftWillOpen","onSwipeableRightWillOpen","onSwipeableWillClose","onSwipeableWillOpen","layout","width","undefined","updateAnimatedEvent","onGestureEvent","event","UNSAFE_componentWillUpdate","render","children","renderLeftActions","renderRightActions","left","View","style","styles","leftActions","transform","translateX","onLayout","x","right","rightActions","activeOffsetX","onHandlerStateChange","onRowLayout","container","containerStyle","enabled","onTapHandlerStateChange","pointerEvents","childrenContainerStyle","StyleSheet","create","overflow","absoluteFillObject","flexDirection","I18nManager","isRTL"],"sources":["Swipeable.tsx"],"sourcesContent":["// Similarily to the DrawerLayout component this deserves to be put in a\n// separate repo. Although, keeping it here for the time being will allow us to\n// move faster and fix possible issues quicker\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  I18nManager,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerEventPayload,\n  PanGestureHandlerProps,\n} from '../handlers/PanGestureHandler';\nimport {\n  TapGestureHandler,\n  TapGestureHandlerEventPayload,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\ntype SwipeableExcludes = Exclude<\n  keyof PanGestureHandlerProps,\n  'onGestureEvent' | 'onHandlerStateChange'\n>;\n\nexport interface SwipeableProps\n  extends Pick<PanGestureHandlerProps, SwipeableExcludes> {\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance. e.g. value of 1 will indicate that the swipeable panel\n   * should exactly follow the gesture, 2 means it is going to be two times\n   * \"slower\".\n   */\n  friction?: number;\n\n  /**\n   * Distance from the left edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  leftThreshold?: number;\n\n  /**\n   * Distance from the right edge at which released panel will animate to the\n   * open state (or the open panel will animate into the closed state). By\n   * default it's a half of the panel's width.\n   */\n  rightThreshold?: number;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the left\n   * actions panel's width. It is set to true by default as long as the left\n   * panel render method is present.\n   */\n  overshootLeft?: boolean;\n\n  /**\n   * Value indicating if the swipeable panel can be pulled further than the\n   * right actions panel's width. It is set to true by default as long as the\n   * right panel render method is present.\n   */\n  overshootRight?: boolean;\n\n  /**\n   * Specifies how much the visual interaction will be delayed compared to the\n   * gesture distance at overshoot. Default value is 1, it mean no friction, for\n   * a native feel, try 8 or above.\n   */\n  overshootFriction?: number;\n\n  /**\n   * Called when left action panel gets open.\n   */\n  onSwipeableLeftOpen?: () => void;\n\n  /**\n   * Called when right action panel gets open.\n   */\n  onSwipeableRightOpen?: () => void;\n\n  /**\n   * Called when action panel gets open (either right or left).\n   */\n  onSwipeableOpen?: () => void;\n\n  /**\n   * Called when action panel is closed.\n   */\n  onSwipeableClose?: () => void;\n\n  /**\n   * Called when left action panel starts animating on open.\n   */\n  onSwipeableLeftWillOpen?: () => void;\n\n  /**\n   * Called when right action panel starts animating on open.\n   */\n  onSwipeableRightWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on open (either right or left).\n   */\n  onSwipeableWillOpen?: () => void;\n\n  /**\n   * Called when action panel starts animating on close.\n   */\n  onSwipeableWillClose?: () => void;\n\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, +]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderLeftActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n  /**\n   *\n   * This map describes the values to use as inputRange for extra interpolation:\n   * AnimatedValue: [startValue, endValue]\n   *\n   * progressAnimatedValue: [0, 1] dragAnimatedValue: [0, -]\n   *\n   * To support `rtl` flexbox layouts use `flexDirection` styling.\n   * */\n  renderRightActions?: (\n    progressAnimatedValue: Animated.AnimatedInterpolation,\n    dragAnimatedValue: Animated.AnimatedInterpolation\n  ) => React.ReactNode;\n\n  useNativeAnimations?: boolean;\n\n  animationOptions?: Record<string, unknown>;\n\n  /**\n   * Style object for the container (`Animated.View`), for example to override\n   * `overflow: 'hidden'`.\n   */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style object for the children container (`Animated.View`), for example to\n   * apply `flex: 1`\n   */\n  childrenContainerStyle?: StyleProp<ViewStyle>;\n}\n\ntype SwipeableState = {\n  dragX: Animated.Value;\n  rowTranslation: Animated.Value;\n  rowState: number;\n  leftWidth?: number;\n  rightOffset?: number;\n  rowWidth?: number;\n};\n\nexport default class Swipeable extends Component<\n  SwipeableProps,\n  SwipeableState\n> {\n  static defaultProps = {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true,\n  };\n\n  constructor(props: SwipeableProps) {\n    super(props);\n    const dragX = new Animated.Value(0);\n    this.state = {\n      dragX,\n      rowTranslation: new Animated.Value(0),\n      rowState: 0,\n      leftWidth: undefined,\n      rightOffset: undefined,\n      rowWidth: undefined,\n    };\n    this.updateAnimatedEvent(props, this.state);\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragX } }],\n      { useNativeDriver: props.useNativeAnimations! }\n    );\n  }\n\n  UNSAFE_componentWillUpdate(props: SwipeableProps, state: SwipeableState) {\n    if (\n      this.props.friction !== props.friction ||\n      this.props.overshootLeft !== props.overshootLeft ||\n      this.props.overshootRight !== props.overshootRight ||\n      this.props.overshootFriction !== props.overshootFriction ||\n      this.state.leftWidth !== state.leftWidth ||\n      this.state.rightOffset !== state.rightOffset ||\n      this.state.rowWidth !== state.rowWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n  }\n\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private transX?: Animated.AnimatedInterpolation;\n  private showLeftAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private leftActionTranslate?: Animated.AnimatedInterpolation;\n  private showRightAction?: Animated.AnimatedInterpolation | Animated.Value;\n  private rightActionTranslate?: Animated.AnimatedInterpolation;\n\n  private updateAnimatedEvent = (\n    props: SwipeableProps,\n    state: SwipeableState\n  ) => {\n    const { friction, overshootFriction } = props;\n    const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n    const { rightOffset = rowWidth } = state;\n    const rightWidth = Math.max(0, rowWidth - rightOffset);\n\n    const {\n      overshootLeft = leftWidth > 0,\n      overshootRight = rightWidth > 0,\n    } = props;\n\n    const transX = Animated.add(\n      rowTranslation,\n      dragX.interpolate({\n        inputRange: [0, friction!],\n        outputRange: [0, 1],\n      })\n    ).interpolate({\n      inputRange: [-rightWidth - 1, -rightWidth, leftWidth, leftWidth + 1],\n      outputRange: [\n        -rightWidth - (overshootRight ? 1 / overshootFriction! : 0),\n        -rightWidth,\n        leftWidth,\n        leftWidth + (overshootLeft ? 1 / overshootFriction! : 0),\n      ],\n    });\n    this.transX = transX;\n    this.showLeftAction =\n      leftWidth > 0\n        ? transX.interpolate({\n            inputRange: [-1, 0, leftWidth],\n            outputRange: [0, 0, 1],\n          })\n        : new Animated.Value(0);\n    this.leftActionTranslate = this.showLeftAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n    this.showRightAction =\n      rightWidth > 0\n        ? transX.interpolate({\n            inputRange: [-rightWidth, 0, 1],\n            outputRange: [1, 0, 0],\n          })\n        : new Animated.Value(0);\n    this.rightActionTranslate = this.showRightAction.interpolate({\n      inputRange: [0, Number.MIN_VALUE],\n      outputRange: [-10000, 0],\n      extrapolate: 'clamp',\n    });\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.close();\n    }\n  };\n\n  private onHandlerStateChange = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    if (ev.nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease(ev);\n    }\n  };\n\n  private handleRelease = (\n    ev: HandlerStateChangeEvent<PanGestureHandlerEventPayload>\n  ) => {\n    const { velocityX, translationX: dragX } = ev.nativeEvent;\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    const {\n      friction,\n      leftThreshold = leftWidth / 2,\n      rightThreshold = rightWidth / 2,\n    } = this.props;\n\n    const startOffsetX = this.currentOffset() + dragX / friction!;\n    const translationX = (dragX + DRAG_TOSS * velocityX) / friction!;\n\n    let toValue = 0;\n    if (rowState === 0) {\n      if (translationX > leftThreshold) {\n        toValue = leftWidth;\n      } else if (translationX < -rightThreshold) {\n        toValue = -rightWidth;\n      }\n    } else if (rowState === 1) {\n      // swiped to left\n      if (translationX > -leftThreshold) {\n        toValue = leftWidth;\n      }\n    } else {\n      // swiped to right\n      if (translationX < rightThreshold) {\n        toValue = -rightWidth;\n      }\n    }\n\n    this.animateRow(startOffsetX, toValue, velocityX / friction!);\n  };\n\n  private animateRow = (\n    fromValue: number,\n    toValue: number,\n    velocityX?:\n      | number\n      | {\n          x: number;\n          y: number;\n        }\n  ) => {\n    const { dragX, rowTranslation } = this.state;\n    dragX.setValue(0);\n    rowTranslation.setValue(fromValue);\n\n    this.setState({ rowState: Math.sign(toValue) });\n    Animated.spring(rowTranslation, {\n      restSpeedThreshold: 1.7,\n      restDisplacementThreshold: 0.4,\n      velocity: velocityX,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      ...this.props.animationOptions,\n    }).start(({ finished }) => {\n      if (finished) {\n        if (toValue > 0 && this.props.onSwipeableLeftOpen) {\n          this.props.onSwipeableLeftOpen();\n        } else if (toValue < 0 && this.props.onSwipeableRightOpen) {\n          this.props.onSwipeableRightOpen();\n        }\n\n        if (toValue === 0) {\n          this.props.onSwipeableClose?.();\n        } else {\n          this.props.onSwipeableOpen?.();\n        }\n      }\n    });\n    if (toValue > 0 && this.props.onSwipeableLeftWillOpen) {\n      this.props.onSwipeableLeftWillOpen();\n    } else if (toValue < 0 && this.props.onSwipeableRightWillOpen) {\n      this.props.onSwipeableRightWillOpen();\n    }\n\n    if (toValue === 0) {\n      this.props.onSwipeableWillClose?.();\n    } else {\n      this.props.onSwipeableWillOpen?.();\n    }\n  };\n\n  private onRowLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ rowWidth: nativeEvent.layout.width });\n  };\n\n  private currentOffset = () => {\n    const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    if (rowState === 1) {\n      return leftWidth;\n    } else if (rowState === -1) {\n      return -rightWidth;\n    }\n    return 0;\n  };\n\n  close = () => {\n    this.animateRow(this.currentOffset(), 0);\n  };\n\n  openLeft = () => {\n    const { leftWidth = 0 } = this.state;\n    this.animateRow(this.currentOffset(), leftWidth);\n  };\n\n  openRight = () => {\n    const { rowWidth = 0 } = this.state;\n    const { rightOffset = rowWidth } = this.state;\n    const rightWidth = rowWidth - rightOffset;\n    this.animateRow(this.currentOffset(), -rightWidth);\n  };\n\n  render() {\n    const { rowState } = this.state;\n    const { children, renderLeftActions, renderRightActions } = this.props;\n\n    const left = renderLeftActions && (\n      <Animated.View\n        style={[\n          styles.leftActions,\n          // all those and below parameters can have ! since they are all\n          // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n          // it for some reason\n          { transform: [{ translateX: this.leftActionTranslate! }] },\n        ]}>\n        {renderLeftActions(this.showLeftAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ leftWidth: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    const right = renderRightActions && (\n      <Animated.View\n        style={[\n          styles.rightActions,\n          { transform: [{ translateX: this.rightActionTranslate! }] },\n        ]}>\n        {renderRightActions(this.showRightAction!, this.transX!)}\n        <View\n          onLayout={({ nativeEvent }) =>\n            this.setState({ rightOffset: nativeEvent.layout.x })\n          }\n        />\n      </Animated.View>\n    );\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-10, 10]}\n        {...this.props}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.onHandlerStateChange}>\n        <Animated.View\n          onLayout={this.onRowLayout}\n          style={[styles.container, this.props.containerStyle]}>\n          {left}\n          {right}\n          <TapGestureHandler\n            enabled={rowState !== 0}\n            onHandlerStateChange={this.onTapHandlerStateChange}>\n            <Animated.View\n              pointerEvents={rowState === 0 ? 'auto' : 'box-only'}\n              style={[\n                {\n                  transform: [{ translateX: this.transX! }],\n                },\n                this.props.childrenContainerStyle,\n              ]}>\n              {children}\n            </Animated.View>\n          </TapGestureHandler>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  leftActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row-reverse' : 'row',\n  },\n  rightActions: {\n    ...StyleSheet.absoluteFillObject,\n    flexDirection: I18nManager.isRTL ? 'row' : 'row-reverse',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}