{"ast":null,"code":"import processColor from \"react-native-web/dist/exports/processColor\";\nvar isWebColor = function isWebColor(color) {\n  return color === 'currentcolor' || color === 'currentColor' || color === 'inherit' || color.indexOf('var(') === 0;\n};\nexport function normalizeColor(color) {\n  var opacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  if (color == null) return;\n  if (typeof color === 'string' && isWebColor(color)) {\n    return color;\n  }\n  var colorInt = processColor(color);\n  if (colorInt != null) {\n    var r = colorInt >> 16 & 255;\n    var g = colorInt >> 8 & 255;\n    var b = colorInt & 255;\n    var a = (colorInt >> 24 & 255) / 255;\n    var alpha = (a * opacity).toFixed(2);\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + alpha + \")\";\n  }\n}","map":{"version":3,"sources":["../src/normalizeColor.ts"],"names":[],"mappings":";AASA,IAAM,UAAU,GAAG,SAAb,UAAU,CAAI,KAAa;EAAA,OAC/B,KAAK,KAAK,cAAc,IACxB,KAAK,KAAK,cAAc,IACxB,KAAK,KAAK,SAAS,IACnB,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC;AAAA;AAE7B,OAAM,SAAU,cAAc,CAAC,KAAuB,EAAqB;EAAA,IAAnB,OAAA,uEAAkB,CAAC;EACzE,IAAI,KAAK,IAAI,IAAI,EAAE;EAEnB,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;IAClD,OAAO,KAAK;EACb;EAED,IAAM,QAAQ,GAAG,YAAY,CAAC,KAAK,CAAuB;EAC1D,IAAI,QAAQ,IAAI,IAAI,EAAE;IACpB,IAAM,CAAC,GAAI,QAAQ,IAAI,EAAE,GAAI,GAAG;IAChC,IAAM,CAAC,GAAI,QAAQ,IAAI,CAAC,GAAI,GAAG;IAC/B,IAAM,CAAC,GAAG,QAAQ,GAAG,GAAG;IACxB,IAAM,CAAC,GAAG,CAAE,QAAQ,IAAI,EAAE,GAAI,GAAG,IAAI,GAAG;IACxC,IAAM,KAAK,GAAG,CAAC,CAAC,GAAG,OAAO,EAAE,OAAO,CAAC,CAAC,CAAC;IACtC,iBAAe,CAAC,SAAI,CAAC,SAAI,CAAC,SAAI,KAAK;EACpC;AACH","sourcesContent":["/**\n * Copyright (c) Expo.\n * Copyright (c) Nicolas Gallagher.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport { processColor } from 'react-native';\n\nconst isWebColor = (color: string): boolean =>\n  color === 'currentcolor' ||\n  color === 'currentColor' ||\n  color === 'inherit' ||\n  color.indexOf('var(') === 0;\n\nexport function normalizeColor(color?: number | string, opacity: number = 1): void | string {\n  if (color == null) return;\n\n  if (typeof color === 'string' && isWebColor(color)) {\n    return color;\n  }\n\n  const colorInt = processColor(color) as number | undefined;\n  if (colorInt != null) {\n    const r = (colorInt >> 16) & 255;\n    const g = (colorInt >> 8) & 255;\n    const b = colorInt & 255;\n    const a = ((colorInt >> 24) & 255) / 255;\n    const alpha = (a * opacity).toFixed(2);\n    return `rgba(${r},${g},${b},${alpha})`;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}