{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { CodedError } from 'expo-modules-core';\nimport ExpoFontLoader from \"./ExpoFontLoader\";\nimport { FontDisplay } from \"./Font\";\nfunction uriFromFontSource(asset) {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n  return null;\n}\nfunction displayFromFontSource(asset) {\n  return asset.display || FontDisplay.AUTO;\n}\nexport function fontFamilyNeedsScoping(name) {\n  return false;\n}\nexport function getAssetForSource(source) {\n  var uri = uriFromFontSource(source);\n  var display = displayFromFontSource(source);\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n  return {\n    uri: uri,\n    display: display\n  };\n}\nfunction throwInvalidSourceError(source) {\n  var type = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\"ERR_FONT_SOURCE\", \"Expected font asset of type `string | FontResource | Asset` (number is not supported on web) instead got: \" + type);\n}\nexport function loadSingleFontAsync(name, input) {\n  return _regeneratorRuntime.async(function loadSingleFontAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (typeof input !== 'object' || typeof input.uri !== 'string' || input.downloadAsync) {\n            throwInvalidSourceError(input);\n          }\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ExpoFontLoader.loadAsync(name, input));\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getNativeFontName(name) {\n  return name;\n}","map":{"version":3,"mappings":";AACA,SAASA,UAAU,QAAQ,mBAAmB;AAE9C,OAAOC,cAAc;AACrB,SAASC,WAAW;AAGpB,SAASC,iBAAiB,CAACC,KAAU;EACnC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,OAAOA,KAAK,IAAI,IAAI;GACrB,MAAM,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IACpC,OAAOA,KAAK,CAACC,GAAG,IAAID,KAAK,CAACE,QAAQ,IAAI,IAAI;;EAE5C,OAAO,IAAI;AACb;AAEA,SAASC,qBAAqB,CAACH,KAAU;EACvC,OAAOA,KAAK,CAACI,OAAO,IAAIN,WAAW,CAACO,IAAI;AAC1C;AAEA,OAAM,SAAUC,sBAAsB,CAACC,IAAY;EACjD,OAAO,KAAK;AACd;AAEA,OAAM,SAAUC,iBAAiB,CAACC,MAAkB;EAClD,IAAMR,GAAG,GAAGF,iBAAiB,CAACU,MAAM,CAAC;EACrC,IAAML,OAAO,GAAGD,qBAAqB,CAACM,MAAM,CAAC;EAE7C,IAAI,CAACR,GAAG,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IACnCS,uBAAuB,CAACT,GAAG,CAAC;;EAG9B,OAAO;IACLA,GAAG,EAAEA,GAAI;IACTG,OAAO,EAAPA;GACD;AACH;AAEA,SAASM,uBAAuB,CAACD,MAAW;EAC1C,IAAIE,IAAI,GAAW,OAAOF,MAAM;EAChC,IAAIE,IAAI,KAAK,QAAQ,EAAEA,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACJ,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;EAC7D,MAAM,IAAIb,UAAU,mIAE6Fe,IAAI,CACpH;AACH;AAEA,OAAO,SAAeG,mBAAmB,CACvCP,IAAY,EACZQ,KAA2B;EAAA;IAAA;MAAA;QAAA;UAE3B,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAI,OAAOA,KAAK,CAACd,GAAG,KAAK,QAAQ,IAAKc,KAAa,CAACC,aAAa,EAAE;YAC9FN,uBAAuB,CAACK,KAAK,CAAC;;UAC/B;UAAA,iCAEKlB,cAAc,CAACoB,SAAS,CAACV,IAAI,EAAEQ,KAAK,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAG7C,OAAM,SAAUG,iBAAiB,CAACX,IAAY;EAC5C,OAAOA,IAAI;AACb","names":["CodedError","ExpoFontLoader","FontDisplay","uriFromFontSource","asset","uri","localUri","displayFromFontSource","display","AUTO","fontFamilyNeedsScoping","name","getAssetForSource","source","throwInvalidSourceError","type","JSON","stringify","loadSingleFontAsync","input","downloadAsync","loadAsync","getNativeFontName"],"sourceRoot":"","sources":["../src/FontLoader.web.ts"],"sourcesContent":["import { Asset } from 'expo-asset';\nimport { CodedError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font';\nimport { FontResource, FontSource } from './Font.types';\n\nfunction uriFromFontSource(asset: any): string | null {\n  if (typeof asset === 'string') {\n    return asset || null;\n  } else if (typeof asset === 'object') {\n    return asset.uri || asset.localUri || null;\n  }\n  return null;\n}\n\nfunction displayFromFontSource(asset: any): FontDisplay | undefined {\n  return asset.display || FontDisplay.AUTO;\n}\n\nexport function fontFamilyNeedsScoping(name: string): boolean {\n  return false;\n}\n\nexport function getAssetForSource(source: FontSource): Asset | FontResource {\n  const uri = uriFromFontSource(source);\n  const display = displayFromFontSource(source);\n\n  if (!uri || typeof uri !== 'string') {\n    throwInvalidSourceError(uri);\n  }\n\n  return {\n    uri: uri!,\n    display,\n  };\n}\n\nfunction throwInvalidSourceError(source: any): never {\n  let type: string = typeof source;\n  if (type === 'object') type = JSON.stringify(source, null, 2);\n  throw new CodedError(\n    `ERR_FONT_SOURCE`,\n    `Expected font asset of type \\`string | FontResource | Asset\\` (number is not supported on web) instead got: ${type}`\n  );\n}\n\nexport async function loadSingleFontAsync(\n  name: string,\n  input: Asset | FontResource\n): Promise<void> {\n  if (typeof input !== 'object' || typeof input.uri !== 'string' || (input as any).downloadAsync) {\n    throwInvalidSourceError(input);\n  }\n\n  await ExpoFontLoader.loadAsync(name, input);\n}\n\nexport function getNativeFontName(name: string): string {\n  return name;\n}\n"]},"metadata":{},"sourceType":"module"}