{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\nvar _Reanimated$default$c, _Reanimated$default;\nimport React, { useEffect, useRef } from 'react';\nimport { BaseGesture, CALLBACK_TYPE } from \"./gesture\";\nimport { Reanimated } from \"./reanimatedWrapper\";\nimport { registerHandler, unregisterHandler } from \"../handlersRegistry\";\nimport RNGestureHandlerModule from \"../../RNGestureHandlerModule\";\nimport { baseGestureHandlerWithMonitorProps, filterConfig, findNodeHandle } from \"../gestureHandlerCommon\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nimport { flingGestureHandlerProps } from \"../FlingGestureHandler\";\nimport { forceTouchGestureHandlerProps } from \"../ForceTouchGestureHandler\";\nimport { longPressGestureHandlerProps } from \"../LongPressGestureHandler\";\nimport { panGestureHandlerProps, panGestureHandlerCustomNativeProps } from \"../PanGestureHandler\";\nimport { tapGestureHandlerProps } from \"../TapGestureHandler\";\nimport { State } from \"../../State\";\nimport { EventType } from \"../../EventType\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { onGestureHandlerEvent as _onGestureHandlerEvent } from \"./eventReceiver\";\nvar ALLOWED_PROPS = [].concat(_toConsumableArray(baseGestureHandlerWithMonitorProps), _toConsumableArray(tapGestureHandlerProps), _toConsumableArray(panGestureHandlerProps), _toConsumableArray(panGestureHandlerCustomNativeProps), _toConsumableArray(longPressGestureHandlerProps), _toConsumableArray(forceTouchGestureHandlerProps), _toConsumableArray(flingGestureHandlerProps));\nfunction convertToHandlerTag(ref) {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    var _ref$current$handlerT, _ref$current;\n    return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n  }\n}\nfunction extractValidHandlerTags(interactionGroup) {\n  var _interactionGroup$map, _interactionGroup$map2;\n  return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter(function (tag) {\n    return tag > 0;\n  })) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\nfunction dropHandlers(preparedGesture) {\n  for (var _iterator = _createForOfIteratorHelperLoose(preparedGesture.config), _step; !(_step = _iterator()).done;) {\n    var handler = _step.value;\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n    unregisterHandler(handler.handlerTag);\n  }\n}\nfunction attachHandlers(_ref) {\n  var preparedGesture = _ref.preparedGesture,\n    gestureConfig = _ref.gestureConfig,\n    gesture = _ref.gesture,\n    viewTag = _ref.viewTag,\n    useAnimated = _ref.useAnimated,\n    webEventHandlersRef = _ref.webEventHandlersRef;\n  if (!preparedGesture.firstExecution) {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n  setImmediate(function () {\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  });\n  var _loop = function _loop(handler) {\n    RNGestureHandlerModule.createGestureHandler(handler.handlerName, handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS));\n    registerHandler(handler.handlerTag, handler);\n    setImmediate(function () {\n      var requireToFail = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n      var simultaneousWith = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n      }\n      RNGestureHandlerModule.updateGestureHandler(handler.handlerTag, filterConfig(handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n    });\n  };\n  for (var _iterator2 = _createForOfIteratorHelperLoose(gesture), _step2; !(_step2 = _iterator2()).done;) {\n    var handler = _step2.value;\n    _loop(handler);\n  }\n  preparedGesture.config = gesture;\n  for (var _iterator3 = _createForOfIteratorHelperLoose(preparedGesture.config), _step3; !(_step3 = _iterator3()).done;) {\n    var _gesture = _step3.value;\n    if (Platform.OS === 'web') {\n      RNGestureHandlerModule.attachGestureHandler(_gesture.handlerTag, viewTag, !useAnimated, webEventHandlersRef);\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(_gesture.handlerTag, viewTag, !useAnimated);\n    }\n  }\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = gesture.map(function (g) {\n      return g.handlers;\n    });\n  }\n}\nfunction updateHandlers(preparedGesture, gestureConfig, gesture) {\n  gestureConfig === null || gestureConfig === void 0 ? void 0 : gestureConfig.prepare();\n  for (var i = 0; i < gesture.length; i++) {\n    var handler = preparedGesture.config[i];\n    if (gesture[i].handlerTag !== handler.handlerTag) {\n      gesture[i].handlerTag = handler.handlerTag;\n      gesture[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n  setImmediate(function () {\n    for (var _i = 0; _i < gesture.length; _i++) {\n      var _handler = preparedGesture.config[_i];\n      _handler.config = gesture[_i].config;\n      _handler.handlers = gesture[_i].handlers;\n      var requireToFail = extractValidHandlerTags(_handler.config.requireToFail);\n      var simultaneousWith = extractValidHandlerTags(_handler.config.simultaneousWith);\n      RNGestureHandlerModule.updateGestureHandler(_handler.handlerTag, filterConfig(_handler.config, ALLOWED_PROPS, {\n        simultaneousHandlers: simultaneousWith,\n        waitFor: requireToFail\n      }));\n      registerHandler(_handler.handlerTag, _handler);\n    }\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = preparedGesture.config.map(function (g) {\n        return g.handlers;\n      });\n    }\n  });\n}\nfunction needsToReattach(preparedGesture, gesture) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (var i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction useAnimatedGesture(preparedGesture, needsRebuild) {\n  if (!Reanimated) {\n    return;\n  }\n  var isStateChangeEvent = function () {\n    var _f = function _f(event) {\n      return event.oldState != null;\n    };\n    _f._closure = {};\n    _f.asString = \"function isStateChangeEvent(event){return event.oldState!=null;}\";\n    _f.__workletHash = 13883357260557;\n    _f.__location = \"/Users/jeko/Documents/Reactive-4twiggers-animation/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/GestureDetector.js (165:2)\";\n    return _f;\n  }();\n  var isTouchEvent = function () {\n    var _f = function _f(event) {\n      return event.eventType != null;\n    };\n    _f._closure = {};\n    _f.asString = \"function isTouchEvent(event){return event.eventType!=null;}\";\n    _f.__workletHash = 15872269086045;\n    _f.__location = \"/Users/jeko/Documents/Reactive-4twiggers-animation/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/GestureDetector.js (171:2)\";\n    return _f;\n  }();\n  var getHandler = function () {\n    var _f = function _f(type, gesture) {\n      switch (type) {\n        case CALLBACK_TYPE.BEGAN:\n          return gesture.onBegin;\n        case CALLBACK_TYPE.START:\n          return gesture.onStart;\n        case CALLBACK_TYPE.UPDATE:\n          return gesture.onUpdate;\n        case CALLBACK_TYPE.CHANGE:\n          return gesture.onChange;\n        case CALLBACK_TYPE.END:\n          return gesture.onEnd;\n        case CALLBACK_TYPE.FINALIZE:\n          return gesture.onFinalize;\n        case CALLBACK_TYPE.TOUCHES_DOWN:\n          return gesture.onTouchesDown;\n        case CALLBACK_TYPE.TOUCHES_MOVE:\n          return gesture.onTouchesMove;\n        case CALLBACK_TYPE.TOUCHES_UP:\n          return gesture.onTouchesUp;\n        case CALLBACK_TYPE.TOUCHES_CANCELLED:\n          return gesture.onTouchesCancelled;\n      }\n    };\n    _f._closure = {\n      CALLBACK_TYPE: {\n        BEGAN: CALLBACK_TYPE.BEGAN,\n        START: CALLBACK_TYPE.START,\n        UPDATE: CALLBACK_TYPE.UPDATE,\n        CHANGE: CALLBACK_TYPE.CHANGE,\n        END: CALLBACK_TYPE.END,\n        FINALIZE: CALLBACK_TYPE.FINALIZE,\n        TOUCHES_DOWN: CALLBACK_TYPE.TOUCHES_DOWN,\n        TOUCHES_MOVE: CALLBACK_TYPE.TOUCHES_MOVE,\n        TOUCHES_UP: CALLBACK_TYPE.TOUCHES_UP,\n        TOUCHES_CANCELLED: CALLBACK_TYPE.TOUCHES_CANCELLED\n      }\n    };\n    _f.asString = \"function getHandler(type,gesture){const{CALLBACK_TYPE}=jsThis._closure;{switch(type){case CALLBACK_TYPE.BEGAN:return gesture.onBegin;case CALLBACK_TYPE.START:return gesture.onStart;case CALLBACK_TYPE.UPDATE:return gesture.onUpdate;case CALLBACK_TYPE.CHANGE:return gesture.onChange;case CALLBACK_TYPE.END:return gesture.onEnd;case CALLBACK_TYPE.FINALIZE:return gesture.onFinalize;case CALLBACK_TYPE.TOUCHES_DOWN:return gesture.onTouchesDown;case CALLBACK_TYPE.TOUCHES_MOVE:return gesture.onTouchesMove;case CALLBACK_TYPE.TOUCHES_UP:return gesture.onTouchesUp;case CALLBACK_TYPE.TOUCHES_CANCELLED:return gesture.onTouchesCancelled;}}}\";\n    _f.__workletHash = 13033906201160;\n    _f.__location = \"/Users/jeko/Documents/Reactive-4twiggers-animation/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/GestureDetector.js (177:2)\";\n    return _f;\n  }();\n  var touchEventTypeToCallbackType = function () {\n    var _f = function _f(eventType) {\n      switch (eventType) {\n        case EventType.TOUCHES_DOWN:\n          return CALLBACK_TYPE.TOUCHES_DOWN;\n        case EventType.TOUCHES_MOVE:\n          return CALLBACK_TYPE.TOUCHES_MOVE;\n        case EventType.TOUCHES_UP:\n          return CALLBACK_TYPE.TOUCHES_UP;\n        case EventType.TOUCHES_CANCELLED:\n          return CALLBACK_TYPE.TOUCHES_CANCELLED;\n      }\n      return CALLBACK_TYPE.UNDEFINED;\n    };\n    _f._closure = {\n      EventType: {\n        TOUCHES_DOWN: EventType.TOUCHES_DOWN,\n        TOUCHES_MOVE: EventType.TOUCHES_MOVE,\n        TOUCHES_UP: EventType.TOUCHES_UP,\n        TOUCHES_CANCELLED: EventType.TOUCHES_CANCELLED\n      },\n      CALLBACK_TYPE: {\n        TOUCHES_DOWN: CALLBACK_TYPE.TOUCHES_DOWN,\n        TOUCHES_MOVE: CALLBACK_TYPE.TOUCHES_MOVE,\n        TOUCHES_UP: CALLBACK_TYPE.TOUCHES_UP,\n        TOUCHES_CANCELLED: CALLBACK_TYPE.TOUCHES_CANCELLED,\n        UNDEFINED: CALLBACK_TYPE.UNDEFINED\n      }\n    };\n    _f.asString = \"function touchEventTypeToCallbackType(eventType){const{EventType,CALLBACK_TYPE}=jsThis._closure;{switch(eventType){case EventType.TOUCHES_DOWN:return CALLBACK_TYPE.TOUCHES_DOWN;case EventType.TOUCHES_MOVE:return CALLBACK_TYPE.TOUCHES_MOVE;case EventType.TOUCHES_UP:return CALLBACK_TYPE.TOUCHES_UP;case EventType.TOUCHES_CANCELLED:return CALLBACK_TYPE.TOUCHES_CANCELLED;}return CALLBACK_TYPE.UNDEFINED;}}\";\n    _f.__workletHash = 4665487911277;\n    _f.__location = \"/Users/jeko/Documents/Reactive-4twiggers-animation/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/GestureDetector.js (213:2)\";\n    return _f;\n  }();\n  var runWorklet = function () {\n    var _f = function _f(type, gesture, event) {\n      var handler = getHandler(type, gesture);\n      if (gesture.isWorklet[type]) {\n        for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n          args[_key - 3] = arguments[_key];\n        }\n        handler === null || handler === void 0 ? void 0 : handler.apply(void 0, [event].concat(args));\n      } else if (handler) {\n        console.warn('Animated gesture callback must be a worklet');\n      }\n    };\n    _f._closure = {\n      getHandler: getHandler\n    };\n    _f.asString = \"function runWorklet(type,gesture,event,...args){const{getHandler}=jsThis._closure;{const handler=getHandler(type,gesture);if(gesture.isWorklet[type]){handler===null||handler===void 0?void 0:handler(event,...args);}else if(handler){console.warn('Animated gesture callback must be a worklet');}}}\";\n    _f.__workletHash = 3175729087786;\n    _f.__location = \"/Users/jeko/Documents/Reactive-4twiggers-animation/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/GestureDetector.js (233:2)\";\n    return _f;\n  }();\n  var sharedHandlersCallbacks = Reanimated.useSharedValue(null);\n  var lastUpdateEvent = Reanimated.useSharedValue([]);\n  var stateControllers = [];\n  var callback = function () {\n    var _f = function _f(event) {\n      var currentCallback = sharedHandlersCallbacks.value;\n      if (!currentCallback) {\n        return;\n      }\n      for (var i = 0; i < currentCallback.length; i++) {\n        var gesture = currentCallback[i];\n        if (event.handlerTag === gesture.handlerTag) {\n          if (isStateChangeEvent(event)) {\n            if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n              runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n            } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.START, gesture, event);\n              lastUpdateEvent.value[gesture.handlerTag] = undefined;\n            } else if (event.oldState !== event.state && event.state === State.END) {\n              if (event.oldState === State.ACTIVE) {\n                runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n              }\n              runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n            } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.state !== event.oldState) {\n              if (event.oldState === State.ACTIVE) {\n                runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n              }\n              runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n            }\n          } else if (isTouchEvent(event)) {\n            if (!stateControllers[i]) {\n              stateControllers[i] = GestureStateManager.create(event.handlerTag);\n            }\n            if (event.eventType !== EventType.UNDETERMINED) {\n              runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n            }\n          } else {\n            runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n            if (gesture.onChange && gesture.changeEventCalculator) {\n              var _gesture$changeEventC;\n              runWorklet(CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n              lastUpdateEvent.value[gesture.handlerTag] = event;\n            }\n          }\n        }\n      }\n    };\n    _f._closure = {\n      sharedHandlersCallbacks: sharedHandlersCallbacks,\n      isStateChangeEvent: isStateChangeEvent,\n      State: {\n        UNDETERMINED: State.UNDETERMINED,\n        BEGAN: State.BEGAN,\n        ACTIVE: State.ACTIVE,\n        END: State.END,\n        FAILED: State.FAILED,\n        CANCELLED: State.CANCELLED\n      },\n      runWorklet: runWorklet,\n      CALLBACK_TYPE: {\n        BEGAN: CALLBACK_TYPE.BEGAN,\n        START: CALLBACK_TYPE.START,\n        END: CALLBACK_TYPE.END,\n        FINALIZE: CALLBACK_TYPE.FINALIZE,\n        UPDATE: CALLBACK_TYPE.UPDATE,\n        CHANGE: CALLBACK_TYPE.CHANGE\n      },\n      lastUpdateEvent: lastUpdateEvent,\n      isTouchEvent: isTouchEvent,\n      stateControllers: stateControllers,\n      GestureStateManager: {\n        create: GestureStateManager.create\n      },\n      EventType: {\n        UNDETERMINED: EventType.UNDETERMINED\n      },\n      touchEventTypeToCallbackType: touchEventTypeToCallbackType\n    };\n    _f.asString = \"function _f(event){const{sharedHandlersCallbacks,isStateChangeEvent,State,runWorklet,CALLBACK_TYPE,lastUpdateEvent,isTouchEvent,stateControllers,GestureStateManager,EventType,touchEventTypeToCallbackType}=jsThis._closure;{const currentCallback=sharedHandlersCallbacks.value;if(!currentCallback){return;}for(let i=0;i<currentCallback.length;i++){const gesture=currentCallback[i];if(event.handlerTag===gesture.handlerTag){if(isStateChangeEvent(event)){if(event.oldState===State.UNDETERMINED&&event.state===State.BEGAN){runWorklet(CALLBACK_TYPE.BEGAN,gesture,event);}else if((event.oldState===State.BEGAN||event.oldState===State.UNDETERMINED)&&event.state===State.ACTIVE){runWorklet(CALLBACK_TYPE.START,gesture,event);lastUpdateEvent.value[gesture.handlerTag]=undefined;}else if(event.oldState!==event.state&&event.state===State.END){if(event.oldState===State.ACTIVE){runWorklet(CALLBACK_TYPE.END,gesture,event,true);}runWorklet(CALLBACK_TYPE.FINALIZE,gesture,event,true);}else if((event.state===State.FAILED||event.state===State.CANCELLED)&&event.state!==event.oldState){if(event.oldState===State.ACTIVE){runWorklet(CALLBACK_TYPE.END,gesture,event,false);}runWorklet(CALLBACK_TYPE.FINALIZE,gesture,event,false);}}else if(isTouchEvent(event)){if(!stateControllers[i]){stateControllers[i]=GestureStateManager.create(event.handlerTag);}if(event.eventType!==EventType.UNDETERMINED){runWorklet(touchEventTypeToCallbackType(event.eventType),gesture,event,stateControllers[i]);}}else{runWorklet(CALLBACK_TYPE.UPDATE,gesture,event);if(gesture.onChange&&gesture.changeEventCalculator){var _gesture$changeEventC;runWorklet(CALLBACK_TYPE.CHANGE,gesture,(_gesture$changeEventC=gesture.changeEventCalculator)===null||_gesture$changeEventC===void 0?void 0:_gesture$changeEventC.call(gesture,event,lastUpdateEvent.value[gesture.handlerTag]));lastUpdateEvent.value[gesture.handlerTag]=event;}}}}}}\";\n    _f.__workletHash = 8983705865779;\n    _f.__location = \"/Users/jeko/Documents/Reactive-4twiggers-animation/node_modules/react-native-gesture-handler/lib/module/handlers/gestures/GestureDetector.js (256:19)\";\n    return _f;\n  }();\n  var event = Reanimated.useEvent(callback, ['onGestureHandlerStateChange', 'onGestureHandlerEvent'], needsRebuild);\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\nexport var GestureDetector = function GestureDetector(props) {\n  var _gestureConfig$toGest, _gestureConfig$toGest2;\n  var gestureConfig = props.gesture;\n  var gesture = (_gestureConfig$toGest = gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$toGest2 = gestureConfig.toGestureArray) === null || _gestureConfig$toGest2 === void 0 ? void 0 : _gestureConfig$toGest2.call(gestureConfig)) !== null && _gestureConfig$toGest !== void 0 ? _gestureConfig$toGest : [];\n  var useAnimated = gesture.find(function (gesture) {\n    return gesture.handlers.isWorklet.reduce(function (prev, current) {\n      return prev || current;\n    });\n  }) != null;\n  var viewRef = useRef(null);\n  var firstRenderRef = useRef(true);\n  var webEventHandlersRef = useRef({\n    onGestureHandlerEvent: function onGestureHandlerEvent(e) {\n      _onGestureHandlerEvent(e.nativeEvent);\n    }\n  });\n  var preparedGesture = React.useRef({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated\n  }).current;\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error('You cannot change whether you are using gesture or animatedGesture while the app is running');\n  }\n  var needsToRebuildReanimatedEvent = preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture);\n  if (preparedGesture.firstExecution) {\n    var _gestureConfig$initia;\n    gestureConfig === null || gestureConfig === void 0 ? void 0 : (_gestureConfig$initia = gestureConfig.initialize) === null || _gestureConfig$initia === void 0 ? void 0 : _gestureConfig$initia.call(gestureConfig);\n  }\n  if (useAnimated) {\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n  }\n  useEffect(function () {\n    firstRenderRef.current = true;\n    var viewTag = findNodeHandle(viewRef.current);\n    attachHandlers({\n      preparedGesture: preparedGesture,\n      gestureConfig: gestureConfig,\n      gesture: gesture,\n      viewTag: viewTag,\n      useAnimated: useAnimated,\n      webEventHandlersRef: webEventHandlersRef\n    });\n    return function () {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n  useEffect(function () {\n    if (!firstRenderRef.current) {\n      var viewTag = findNodeHandle(viewRef.current);\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture: preparedGesture,\n          gestureConfig: gestureConfig,\n          gesture: gesture,\n          viewTag: viewTag,\n          useAnimated: useAnimated,\n          webEventHandlersRef: webEventHandlersRef\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n  if (useAnimated) {\n    return React.createElement(AnimatedWrap, {\n      ref: viewRef,\n      onGestureHandlerEvent: preparedGesture.animatedEventHandler\n    }, props.children);\n  } else {\n    return React.createElement(Wrap, {\n      ref: viewRef\n    }, props.children);\n  }\n};\nvar Wrap = function (_React$Component) {\n  _inherits(Wrap, _React$Component);\n  var _super = _createSuper(Wrap);\n  function Wrap() {\n    _classCallCheck(this, Wrap);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Wrap, [{\n    key: \"render\",\n    value: function render() {\n      var child = React.Children.only(this.props.children);\n      return React.cloneElement(child, {\n        collapsable: false\n      }, child.props.children);\n    }\n  }]);\n  return Wrap;\n}(React.Component);\nvar AnimatedWrap = (_Reanimated$default$c = Reanimated === null || Reanimated === void 0 ? void 0 : (_Reanimated$default = Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap;","map":{"version":3,"mappings":"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","names":["React","useEffect","useRef","BaseGesture","CALLBACK_TYPE","Reanimated","registerHandler","unregisterHandler","RNGestureHandlerModule","baseGestureHandlerWithMonitorProps","filterConfig","findNodeHandle","GestureStateManager","flingGestureHandlerProps","forceTouchGestureHandlerProps","longPressGestureHandlerProps","panGestureHandlerProps","panGestureHandlerCustomNativeProps","tapGestureHandlerProps","State","EventType","onGestureHandlerEvent","ALLOWED_PROPS","convertToHandlerTag","ref","handlerTag","current","_ref$current","extractValidHandlerTags","interactionGroup","map","_interactionGroup$map2","filter","tag","dropHandlers","preparedGesture","config","handler","dropGestureHandler","attachHandlers","gestureConfig","gesture","viewTag","useAnimated","webEventHandlersRef","firstExecution","initialize","setImmediate","prepare","createGestureHandler","handlerName","requireToFail","simultaneousWith","updateGestureHandler","simultaneousHandlers","waitFor","Platform","OS","attachGestureHandler","animatedHandlers","value","g","handlers","updateHandlers","i","length","needsToReattach","useAnimatedGesture","needsRebuild","isStateChangeEvent","event","oldState","isTouchEvent","eventType","getHandler","type","BEGAN","onBegin","START","onStart","UPDATE","onUpdate","CHANGE","onChange","END","onEnd","FINALIZE","onFinalize","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","touchEventTypeToCallbackType","UNDEFINED","runWorklet","isWorklet","args","console","warn","sharedHandlersCallbacks","useSharedValue","lastUpdateEvent","stateControllers","callback","currentCallback","UNDETERMINED","state","ACTIVE","undefined","FAILED","CANCELLED","create","changeEventCalculator","_gesture$changeEventC","useEvent","animatedEventHandler","GestureDetector","props","toGestureArray","_gestureConfig$toGest2","find","reduce","prev","viewRef","firstRenderRef","e","nativeEvent","Error","needsToRebuildReanimatedEvent","AnimatedWrap","children","Wrap","render","child","Children","only","cloneElement","collapsable","Component","default","_Reanimated$default","createAnimatedComponent"],"sources":["GestureDetector.tsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport {\n  GestureType,\n  HandlerCallbacks,\n  BaseGesture,\n  GestureRef,\n  CALLBACK_TYPE,\n} from './gesture';\nimport { Reanimated, SharedValue } from './reanimatedWrapper';\nimport { registerHandler, unregisterHandler } from '../handlersRegistry';\nimport RNGestureHandlerModule from '../../RNGestureHandlerModule';\nimport {\n  baseGestureHandlerWithMonitorProps,\n  filterConfig,\n  findNodeHandle,\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n  HandlerStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\nimport { flingGestureHandlerProps } from '../FlingGestureHandler';\nimport { forceTouchGestureHandlerProps } from '../ForceTouchGestureHandler';\nimport { longPressGestureHandlerProps } from '../LongPressGestureHandler';\nimport {\n  panGestureHandlerProps,\n  panGestureHandlerCustomNativeProps,\n} from '../PanGestureHandler';\nimport { tapGestureHandlerProps } from '../TapGestureHandler';\nimport { State } from '../../State';\nimport { EventType } from '../../EventType';\nimport { ComposedGesture } from './gestureComposition';\nimport { Platform } from 'react-native';\nimport type RNGestureHandlerModuleWeb from '../../RNGestureHandlerModule.web';\nimport { onGestureHandlerEvent } from './eventReceiver';\n\nconst ALLOWED_PROPS = [\n  ...baseGestureHandlerWithMonitorProps,\n  ...tapGestureHandlerProps,\n  ...panGestureHandlerProps,\n  ...panGestureHandlerCustomNativeProps,\n  ...longPressGestureHandlerProps,\n  ...forceTouchGestureHandlerProps,\n  ...flingGestureHandlerProps,\n];\n\nexport type GestureConfigReference = {\n  config: GestureType[];\n  animatedEventHandler: unknown;\n  animatedHandlers: SharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  > | null;\n  firstExecution: boolean;\n  useAnimated: boolean;\n};\n\nfunction convertToHandlerTag(ref: GestureRef): number {\n  if (typeof ref === 'number') {\n    return ref;\n  } else if (ref instanceof BaseGesture) {\n    return ref.handlerTag;\n  } else {\n    // @ts-ignore in this case it should be a ref either to gesture object or\n    // a gesture handler component, in both cases handlerTag property exists\n    return ref.current?.handlerTag ?? -1;\n  }\n}\n\nfunction extractValidHandlerTags(interactionGroup: GestureRef[] | undefined) {\n  return (\n    interactionGroup?.map(convertToHandlerTag)?.filter((tag) => tag > 0) ?? []\n  );\n}\n\nfunction dropHandlers(preparedGesture: GestureConfigReference) {\n  for (const handler of preparedGesture.config) {\n    RNGestureHandlerModule.dropGestureHandler(handler.handlerTag);\n\n    unregisterHandler(handler.handlerTag);\n  }\n}\n\ninterface WebEventHandler {\n  onGestureHandlerEvent: (event: HandlerStateChangeEvent<unknown>) => void;\n}\n\ninterface AttachHandlersConfig {\n  preparedGesture: GestureConfigReference;\n  gestureConfig: ComposedGesture | GestureType | undefined;\n  gesture: GestureType[];\n  viewTag: number;\n  useAnimated: boolean;\n  webEventHandlersRef: React.RefObject<WebEventHandler>;\n}\n\nfunction attachHandlers({\n  preparedGesture,\n  gestureConfig,\n  gesture,\n  viewTag,\n  useAnimated,\n  webEventHandlersRef,\n}: AttachHandlersConfig) {\n  if (!preparedGesture.firstExecution) {\n    gestureConfig?.initialize();\n  } else {\n    preparedGesture.firstExecution = false;\n  }\n\n  // use setImmediate to extract handlerTags, because all refs should be initialized\n  // when it's ran\n  setImmediate(() => {\n    gestureConfig?.prepare();\n  });\n\n  for (const handler of gesture) {\n    RNGestureHandlerModule.createGestureHandler(\n      handler.handlerName,\n      handler.handlerTag,\n      filterConfig(handler.config, ALLOWED_PROPS)\n    );\n\n    registerHandler(handler.handlerTag, handler);\n\n    // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(() => {\n      let requireToFail: number[] = [];\n      if (handler.config.requireToFail) {\n        requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n      }\n\n      let simultaneousWith: number[] = [];\n      if (handler.config.simultaneousWith) {\n        simultaneousWith = extractValidHandlerTags(\n          handler.config.simultaneousWith\n        );\n      }\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n    });\n  }\n  preparedGesture.config = gesture;\n\n  for (const gesture of preparedGesture.config) {\n    if (Platform.OS === 'web') {\n      (RNGestureHandlerModule.attachGestureHandler as typeof RNGestureHandlerModuleWeb.attachGestureHandler)(\n        gesture.handlerTag,\n        viewTag,\n        !useAnimated, // send direct events when using animatedGesture, device events otherwise\n        webEventHandlersRef\n      );\n    } else {\n      RNGestureHandlerModule.attachGestureHandler(\n        gesture.handlerTag,\n        viewTag,\n        !useAnimated // send direct events when using animatedGesture, device events otherwise\n      );\n    }\n  }\n\n  if (preparedGesture.animatedHandlers) {\n    preparedGesture.animatedHandlers.value = (gesture.map(\n      (g) => g.handlers\n    ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n  }\n}\n\nfunction updateHandlers(\n  preparedGesture: GestureConfigReference,\n  gestureConfig: ComposedGesture | GestureType | undefined,\n  gesture: GestureType[]\n) {\n  gestureConfig?.prepare();\n\n  for (let i = 0; i < gesture.length; i++) {\n    const handler = preparedGesture.config[i];\n\n    // only update handlerTag when it's actually different, it may be the same\n    // if gesture config object is wrapped with useMemo\n    if (gesture[i].handlerTag !== handler.handlerTag) {\n      gesture[i].handlerTag = handler.handlerTag;\n      gesture[i].handlers.handlerTag = handler.handlerTag;\n    }\n  }\n\n  // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\n  // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n  // in case of external relations)\n  setImmediate(() => {\n    for (let i = 0; i < gesture.length; i++) {\n      const handler = preparedGesture.config[i];\n\n      handler.config = gesture[i].config;\n      handler.handlers = gesture[i].handlers;\n\n      const requireToFail = extractValidHandlerTags(\n        handler.config.requireToFail\n      );\n\n      const simultaneousWith = extractValidHandlerTags(\n        handler.config.simultaneousWith\n      );\n\n      RNGestureHandlerModule.updateGestureHandler(\n        handler.handlerTag,\n        filterConfig(handler.config, ALLOWED_PROPS, {\n          simultaneousHandlers: simultaneousWith,\n          waitFor: requireToFail,\n        })\n      );\n\n      registerHandler(handler.handlerTag, handler);\n    }\n\n    if (preparedGesture.animatedHandlers) {\n      preparedGesture.animatedHandlers.value = (preparedGesture.config.map(\n        (g) => g.handlers\n      ) as unknown) as HandlerCallbacks<Record<string, unknown>>[];\n    }\n  });\n}\n\nfunction needsToReattach(\n  preparedGesture: GestureConfigReference,\n  gesture: GestureType[]\n) {\n  if (gesture.length !== preparedGesture.config.length) {\n    return true;\n  }\n  for (let i = 0; i < gesture.length; i++) {\n    if (gesture[i].handlerName !== preparedGesture.config[i].handlerName) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction useAnimatedGesture(\n  preparedGesture: GestureConfigReference,\n  needsRebuild: boolean\n) {\n  if (!Reanimated) {\n    return;\n  }\n\n  function isStateChangeEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureStateChangeEvent {\n    'worklet';\n    // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n    return event.oldState != null;\n  }\n\n  function isTouchEvent(\n    event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n  ): event is GestureTouchEvent {\n    'worklet';\n    return event.eventType != null;\n  }\n\n  function getHandler(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>\n  ) {\n    'worklet';\n    switch (type) {\n      case CALLBACK_TYPE.BEGAN:\n        return gesture.onBegin;\n      case CALLBACK_TYPE.START:\n        return gesture.onStart;\n      case CALLBACK_TYPE.UPDATE:\n        return gesture.onUpdate;\n      case CALLBACK_TYPE.CHANGE:\n        return gesture.onChange;\n      case CALLBACK_TYPE.END:\n        return gesture.onEnd;\n      case CALLBACK_TYPE.FINALIZE:\n        return gesture.onFinalize;\n      case CALLBACK_TYPE.TOUCHES_DOWN:\n        return gesture.onTouchesDown;\n      case CALLBACK_TYPE.TOUCHES_MOVE:\n        return gesture.onTouchesMove;\n      case CALLBACK_TYPE.TOUCHES_UP:\n        return gesture.onTouchesUp;\n      case CALLBACK_TYPE.TOUCHES_CANCELLED:\n        return gesture.onTouchesCancelled;\n    }\n  }\n\n  function touchEventTypeToCallbackType(eventType: EventType): CALLBACK_TYPE {\n    'worklet';\n    switch (eventType) {\n      case EventType.TOUCHES_DOWN:\n        return CALLBACK_TYPE.TOUCHES_DOWN;\n      case EventType.TOUCHES_MOVE:\n        return CALLBACK_TYPE.TOUCHES_MOVE;\n      case EventType.TOUCHES_UP:\n        return CALLBACK_TYPE.TOUCHES_UP;\n      case EventType.TOUCHES_CANCELLED:\n        return CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return CALLBACK_TYPE.UNDEFINED;\n  }\n\n  function runWorklet(\n    type: CALLBACK_TYPE,\n    gesture: HandlerCallbacks<Record<string, unknown>>,\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent,\n    ...args: any[]\n  ) {\n    'worklet';\n    const handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n      // @ts-ignore Logic below makes sure the correct event is send to the\n      // correct handler.\n      handler?.(event, ...args);\n    } else if (handler) {\n      console.warn('Animated gesture callback must be a worklet');\n    }\n  }\n\n  // Hooks are called conditionally, but the condition is whether the\n  // react-native-reanimated is installed, which shouldn't change while running\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const sharedHandlersCallbacks = Reanimated.useSharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  >(null);\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const lastUpdateEvent = Reanimated.useSharedValue<\n    (GestureUpdateEvent | undefined)[]\n  >([]);\n\n  // not every gesture needs a state controller, init them lazily\n  const stateControllers: GestureStateManagerType[] = [];\n\n  const callback = (\n    event: GestureStateChangeEvent | GestureUpdateEvent | GestureTouchEvent\n  ) => {\n    'worklet';\n\n    const currentCallback = sharedHandlersCallbacks.value;\n    if (!currentCallback) {\n      return;\n    }\n\n    for (let i = 0; i < currentCallback.length; i++) {\n      const gesture = currentCallback[i];\n\n      if (event.handlerTag === gesture.handlerTag) {\n        if (isStateChangeEvent(event)) {\n          if (\n            event.oldState === State.UNDETERMINED &&\n            event.state === State.BEGAN\n          ) {\n            runWorklet(CALLBACK_TYPE.BEGAN, gesture, event);\n          } else if (\n            (event.oldState === State.BEGAN ||\n              event.oldState === State.UNDETERMINED) &&\n            event.state === State.ACTIVE\n          ) {\n            runWorklet(CALLBACK_TYPE.START, gesture, event);\n            lastUpdateEvent.value[gesture.handlerTag] = undefined;\n          } else if (\n            event.oldState !== event.state &&\n            event.state === State.END\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, true);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, true);\n          } else if (\n            (event.state === State.FAILED || event.state === State.CANCELLED) &&\n            event.state !== event.oldState\n          ) {\n            if (event.oldState === State.ACTIVE) {\n              runWorklet(CALLBACK_TYPE.END, gesture, event, false);\n            }\n            runWorklet(CALLBACK_TYPE.FINALIZE, gesture, event, false);\n          }\n        } else if (isTouchEvent(event)) {\n          if (!stateControllers[i]) {\n            stateControllers[i] = GestureStateManager.create(event.handlerTag);\n          }\n\n          if (event.eventType !== EventType.UNDETERMINED) {\n            runWorklet(\n              touchEventTypeToCallbackType(event.eventType),\n              gesture,\n              event,\n              stateControllers[i]\n            );\n          }\n        } else {\n          runWorklet(CALLBACK_TYPE.UPDATE, gesture, event);\n\n          if (gesture.onChange && gesture.changeEventCalculator) {\n            runWorklet(\n              CALLBACK_TYPE.CHANGE,\n              gesture,\n              gesture.changeEventCalculator?.(\n                event,\n                lastUpdateEvent.value[gesture.handlerTag]\n              )\n            );\n\n            lastUpdateEvent.value[gesture.handlerTag] = event;\n          }\n        }\n      }\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const event = Reanimated.useEvent(\n    callback,\n    ['onGestureHandlerStateChange', 'onGestureHandlerEvent'],\n    needsRebuild\n  );\n\n  preparedGesture.animatedEventHandler = event;\n  preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n}\n\ninterface GestureDetectorProps {\n  gesture?: ComposedGesture | GestureType;\n}\nexport const GestureDetector: React.FunctionComponent<GestureDetectorProps> = (\n  props\n) => {\n  const gestureConfig = props.gesture;\n  const gesture = gestureConfig?.toGestureArray?.() ?? [];\n  const useAnimated =\n    gesture.find((gesture) =>\n      gesture.handlers.isWorklet.reduce((prev, current) => prev || current)\n    ) != null;\n  const viewRef = useRef(null);\n  const firstRenderRef = useRef(true);\n  const webEventHandlersRef = useRef<WebEventHandler>({\n    onGestureHandlerEvent: (e: HandlerStateChangeEvent<unknown>) => {\n      onGestureHandlerEvent(e.nativeEvent);\n    },\n  });\n\n  const preparedGesture = React.useRef<GestureConfigReference>({\n    config: gesture,\n    animatedEventHandler: null,\n    animatedHandlers: null,\n    firstExecution: true,\n    useAnimated: useAnimated,\n  }).current;\n\n  if (useAnimated !== preparedGesture.useAnimated) {\n    throw new Error(\n      'You cannot change whether you are using gesture or animatedGesture while the app is running'\n    );\n  }\n\n  // Reanimated event should be rebuilt only when gestures are reattached, otherwise\n  // config update will be enough as all necessary items are stored in shared values anyway\n  const needsToRebuildReanimatedEvent =\n    preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture);\n\n  if (preparedGesture.firstExecution) {\n    gestureConfig?.initialize?.();\n  }\n\n  if (useAnimated) {\n    // Whether animatedGesture or gesture is used shouldn't change\n    // during while an app is running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n  }\n\n  useEffect(() => {\n    firstRenderRef.current = true;\n    const viewTag = findNodeHandle(viewRef.current) as number;\n    attachHandlers({\n      preparedGesture,\n      gestureConfig,\n      gesture,\n      viewTag,\n      useAnimated,\n      webEventHandlersRef,\n    });\n\n    return () => {\n      dropHandlers(preparedGesture);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!firstRenderRef.current) {\n      const viewTag = findNodeHandle(viewRef.current) as number;\n\n      if (needsToReattach(preparedGesture, gesture)) {\n        dropHandlers(preparedGesture);\n        attachHandlers({\n          preparedGesture,\n          gestureConfig,\n          gesture,\n          viewTag,\n          useAnimated,\n          webEventHandlersRef,\n        });\n      } else {\n        updateHandlers(preparedGesture, gestureConfig, gesture);\n      }\n    } else {\n      firstRenderRef.current = false;\n    }\n  }, [props]);\n\n  if (useAnimated) {\n    return (\n      <AnimatedWrap\n        ref={viewRef}\n        onGestureHandlerEvent={preparedGesture.animatedEventHandler}>\n        {props.children}\n      </AnimatedWrap>\n    );\n  } else {\n    return <Wrap ref={viewRef}>{props.children}</Wrap>;\n  }\n};\n\nclass Wrap extends React.Component<{ onGestureHandlerEvent?: unknown }> {\n  render() {\n    // I don't think that fighting with types over such a simple function is worth it\n    // The only thing it does is add 'collapsable: false' to the child component\n    // to make sure it is in the native view hierarchy so the detector can find\n    // correct viewTag to attach to.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const child: any = React.Children.only(this.props.children);\n\n    return React.cloneElement(\n      child,\n      { collapsable: false },\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      child.props.children\n    );\n  }\n}\n\nconst AnimatedWrap = Reanimated?.default?.createAnimatedComponent(Wrap) ?? Wrap;\n"]},"metadata":{},"sourceType":"module"}