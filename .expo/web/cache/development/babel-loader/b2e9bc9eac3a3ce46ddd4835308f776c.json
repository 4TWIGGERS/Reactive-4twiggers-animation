{"ast":null,"code":"import DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport { State } from \"../../State\";\nimport { TouchEventType } from \"../../TouchEventType\";\nimport { findHandler, findOldGestureHandler } from \"../handlersRegistry\";\nimport { GestureStateManager } from \"./gestureStateManager\";\nvar gestureHandlerEventSubscription = null;\nvar gestureHandlerStateChangeEventSubscription = null;\nvar gestureStateManagers = new Map();\nvar lastUpdateEvent = [];\nfunction isStateChangeEvent(event) {\n  return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n  return event.eventType != null;\n}\nexport function onGestureHandlerEvent(event) {\n  var _handler$handlers7, _handler$handlers7$on, _handler$handlers8, _handler$handlers8$on, _handler$handlers9, _handler$handlers9$on, _handler$handlers10, _handler$handlers10$o;\n  var handler = findHandler(event.handlerTag);\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (event.oldState === State.UNDETERMINED && event.state === State.BEGAN) {\n        var _handler$handlers$onB, _handler$handlers;\n        (_handler$handlers$onB = (_handler$handlers = handler.handlers).onBegin) === null || _handler$handlers$onB === void 0 ? void 0 : _handler$handlers$onB.call(_handler$handlers, event);\n      } else if ((event.oldState === State.BEGAN || event.oldState === State.UNDETERMINED) && event.state === State.ACTIVE) {\n        var _handler$handlers$onS, _handler$handlers2;\n        (_handler$handlers$onS = (_handler$handlers2 = handler.handlers).onStart) === null || _handler$handlers$onS === void 0 ? void 0 : _handler$handlers$onS.call(_handler$handlers2, event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        var _handler$handlers$onF, _handler$handlers4;\n        if (event.oldState === State.ACTIVE) {\n          var _handler$handlers$onE, _handler$handlers3;\n          (_handler$handlers$onE = (_handler$handlers3 = handler.handlers).onEnd) === null || _handler$handlers$onE === void 0 ? void 0 : _handler$handlers$onE.call(_handler$handlers3, event, true);\n        }\n        (_handler$handlers$onF = (_handler$handlers4 = handler.handlers).onFinalize) === null || _handler$handlers$onF === void 0 ? void 0 : _handler$handlers$onF.call(_handler$handlers4, event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if ((event.state === State.FAILED || event.state === State.CANCELLED) && event.oldState !== event.state) {\n        var _handler$handlers$onF2, _handler$handlers6;\n        if (event.oldState === State.ACTIVE) {\n          var _handler$handlers$onE2, _handler$handlers5;\n          (_handler$handlers$onE2 = (_handler$handlers5 = handler.handlers).onEnd) === null || _handler$handlers$onE2 === void 0 ? void 0 : _handler$handlers$onE2.call(_handler$handlers5, event, false);\n        }\n        (_handler$handlers$onF2 = (_handler$handlers6 = handler.handlers).onFinalize) === null || _handler$handlers$onF2 === void 0 ? void 0 : _handler$handlers$onF2.call(_handler$handlers6, event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(event.handlerTag, GestureStateManager.create(event.handlerTag));\n      }\n      var manager = gestureStateManagers.get(event.handlerTag);\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          (_handler$handlers7 = handler.handlers) === null || _handler$handlers7 === void 0 ? void 0 : (_handler$handlers7$on = _handler$handlers7.onTouchesDown) === null || _handler$handlers7$on === void 0 ? void 0 : _handler$handlers7$on.call(_handler$handlers7, event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          (_handler$handlers8 = handler.handlers) === null || _handler$handlers8 === void 0 ? void 0 : (_handler$handlers8$on = _handler$handlers8.onTouchesMove) === null || _handler$handlers8$on === void 0 ? void 0 : _handler$handlers8$on.call(_handler$handlers8, event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          (_handler$handlers9 = handler.handlers) === null || _handler$handlers9 === void 0 ? void 0 : (_handler$handlers9$on = _handler$handlers9.onTouchesUp) === null || _handler$handlers9$on === void 0 ? void 0 : _handler$handlers9$on.call(_handler$handlers9, event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          (_handler$handlers10 = handler.handlers) === null || _handler$handlers10 === void 0 ? void 0 : (_handler$handlers10$o = _handler$handlers10.onTouchesCancelled) === null || _handler$handlers10$o === void 0 ? void 0 : _handler$handlers10$o.call(_handler$handlers10, event, manager);\n          break;\n      }\n    } else {\n      var _handler$handlers$onU, _handler$handlers11;\n      (_handler$handlers$onU = (_handler$handlers11 = handler.handlers).onUpdate) === null || _handler$handlers$onU === void 0 ? void 0 : _handler$handlers$onU.call(_handler$handlers11, event);\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        var _handler$handlers$onC, _handler$handlers12, _handler$handlers$cha, _handler$handlers13;\n        (_handler$handlers$onC = (_handler$handlers12 = handler.handlers).onChange) === null || _handler$handlers$onC === void 0 ? void 0 : _handler$handlers$onC.call(_handler$handlers12, (_handler$handlers$cha = (_handler$handlers13 = handler.handlers).changeEventCalculator) === null || _handler$handlers$cha === void 0 ? void 0 : _handler$handlers$cha.call(_handler$handlers13, event, lastUpdateEvent[handler.handlers.handlerTag]));\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    var oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      var nativeEvent = {\n        nativeEvent: event\n      };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\nexport function startListening() {\n  stopListening();\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerEvent', onGestureHandlerEvent);\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener('onGestureHandlerStateChange', onGestureHandlerEvent);\n}\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}","map":{"version":3,"sources":["eventReceiver.ts"],"names":["State","TouchEventType","findHandler","findOldGestureHandler","GestureStateManager","gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","gestureStateManagers","Map","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","handler","handlerTag","UNDETERMINED","state","BEGAN","handlers","onBegin","ACTIVE","onStart","END","onEnd","onFinalize","undefined","FAILED","CANCELLED","delete","has","set","create","manager","get","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","onUpdate","onChange","changeEventCalculator","oldHandler","nativeEvent","onGestureStateChange","onGestureEvent","startListening","stopListening","DeviceEventEmitter","addListener","remove"],"mappings":"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","sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null =\n  null;\n\nconst gestureStateManagers: Map<number, GestureStateManagerType> = new Map<\n  number,\n  GestureStateManagerType\n>();\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(\n          event.handlerTag,\n          GestureStateManager.create(event.handlerTag)\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const manager = gestureStateManagers.get(event.handlerTag)!;\n\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, manager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}