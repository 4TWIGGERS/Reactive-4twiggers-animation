{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar gestures = {};\nexport function getHandler(tag) {\n  if (tag in gestures) {\n    return gestures[tag];\n  }\n  throw new Error(\"No handler for tag \" + tag);\n}\nexport function createGestureHandler(handlerTag, handler) {\n  if (handlerTag in gestures) {\n    throw new Error(\"Handler with tag \" + handlerTag + \" already exists\");\n  }\n  gestures[handlerTag] = handler;\n  gestures[handlerTag].handlerTag = handlerTag;\n}\nexport function dropGestureHandler(handlerTag) {\n  if (!(handlerTag in gestures)) {\n    return;\n  }\n  getHandler(handlerTag).destroy();\n  delete gestures[handlerTag];\n}\nexport function getNodes() {\n  return _objectSpread({}, gestures);\n}","map":{"version":3,"sources":["NodeManager.ts"],"names":["gestures","getHandler","tag","Error","createGestureHandler","handlerTag","handler","dropGestureHandler","destroy","getNodes"],"mappings":";;;AAGA,IAAMA,QAGL,GAAG,CAAA,CAHJ;AAKA,OAAO,SAASC,UAAT,CAAoBC,GAApB,EAAiC;EACtC,IAAIA,GAAG,IAAIF,QAAX,EAAqB;IACnB,OAAOA,QAAQ,CAACE,GAAD,CAAf;EACD;EAED,MAAM,IAAIC,KAAJ,yBAAgCD,GAAhC,CAAN;AACD;AAED,OAAO,SAASE,oBAAT,CACLC,UADK,EAELC,OAFK,EAGL;EACA,IAAID,UAAU,IAAIL,QAAlB,EAA4B;IAC1B,MAAM,IAAIG,KAAJ,uBAA8BE,UAA9B,qBAAN;EACD;EACDL,QAAQ,CAACK,UAAD,CAARL,GAAuBM,OAJvB;EAMAN,QAAQ,CAACK,UAAD,CAARL,CAAqBK,UAArBL,GAAkCK,UAAlCL;AACD;AAED,OAAO,SAASO,kBAAT,CAA4BF,UAA5B,EAAgD;EAGrD,IAAI,EAAEA,UAAU,IAAIL,QAAhB,CAAJ,EAA+B;IAC7B;EACD;EACDC,UAAU,CAACI,UAAD,CAAVJ,CAAuBO,OAAvBP,EANqD;EAQrD,OAAOD,QAAQ,CAACK,UAAD,CAAf;AACD;AAED,OAAO,SAASI,QAAT,GAAoB;EACzB,yBAAYT,QAAAA;AACb","sourcesContent":["import { ValueOf } from '../typeUtils';\nimport { HammerGestures } from '../RNGestureHandlerModule.web';\n\nconst gestures: Record<\n  number,\n  InstanceType<ValueOf<typeof HammerGestures>>\n> = {};\n\nexport function getHandler(tag: number) {\n  if (tag in gestures) {\n    return gestures[tag];\n  }\n\n  throw new Error(`No handler for tag ${tag}`);\n}\n\nexport function createGestureHandler(\n  handlerTag: number,\n  handler: InstanceType<ValueOf<typeof HammerGestures>>\n) {\n  if (handlerTag in gestures) {\n    throw new Error(`Handler with tag ${handlerTag} already exists`);\n  }\n  gestures[handlerTag] = handler;\n  // @ts-ignore no types for web handlers yet\n  gestures[handlerTag].handlerTag = handlerTag;\n}\n\nexport function dropGestureHandler(handlerTag: number) {\n  // Since React 18, there are cases where componentWillUnmount gets called twice in a row\n  // so skip this if the tag was already removed.\n  if (!(handlerTag in gestures)) {\n    return;\n  }\n  getHandler(handlerTag).destroy();\n  // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n  delete gestures[handlerTag];\n}\n\nexport function getNodes() {\n  return { ...gestures };\n}\n"]},"metadata":{},"sourceType":"module"}