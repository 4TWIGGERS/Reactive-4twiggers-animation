{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"minPointers\", \"maxPointers\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport GestureHandler from \"./GestureHandler\";\nvar IndiscreteGestureHandler = function (_GestureHandler) {\n  _inherits(IndiscreteGestureHandler, _GestureHandler);\n  var _super = _createSuper(IndiscreteGestureHandler);\n  function IndiscreteGestureHandler() {\n    _classCallCheck(this, IndiscreteGestureHandler);\n    return _super.apply(this, arguments);\n  }\n  _createClass(IndiscreteGestureHandler, [{\n    key: \"shouldEnableGestureOnSetup\",\n    get: function get() {\n      return false;\n    }\n  }, {\n    key: \"updateGestureConfig\",\n    value: function updateGestureConfig(_ref) {\n      var _ref$minPointers = _ref.minPointers,\n        minPointers = _ref$minPointers === void 0 ? 2 : _ref$minPointers,\n        _ref$maxPointers = _ref.maxPointers,\n        maxPointers = _ref$maxPointers === void 0 ? 2 : _ref$maxPointers,\n        props = _objectWithoutProperties(_ref, _excluded);\n      return _get(_getPrototypeOf(IndiscreteGestureHandler.prototype), \"updateGestureConfig\", this).call(this, _objectSpread({\n        minPointers: minPointers,\n        maxPointers: maxPointers\n      }, props));\n    }\n  }, {\n    key: \"isGestureEnabledForEvent\",\n    value: function isGestureEnabledForEvent(_ref2, _recognizer, _ref3) {\n      var minPointers = _ref2.minPointers,\n        maxPointers = _ref2.maxPointers;\n      var pointerLength = _ref3.maxPointers;\n      if (pointerLength > maxPointers) {\n        return {\n          failed: true\n        };\n      }\n      var validPointerCount = pointerLength >= minPointers;\n      return {\n        success: validPointerCount\n      };\n    }\n  }]);\n  return IndiscreteGestureHandler;\n}(GestureHandler);\nexport default IndiscreteGestureHandler;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA,OAAOA,cAAP;AAAA,IAKeC,wBAAf;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,KACgC,eAAG;MAC/B,OAAO,KAAP;IACD;EAAA;IAAA;IAAA,OAEDC,mCAAoE;MAAA,4BAA9CC,WAAW;QAAXA,WAAW,iCAAG,CAAhB;QAAA,wBAAmBC,WAAW;QAAXA,WAAW,iCAAG,CAAjC;QAAuCC;MACzD;QACEF,WAD+B,EAC/BA,WAD+B;QAE/BC,WAF+B,EAE/BA;MAF+B,GAG5BC;IAEN;EAAA;IAAA;IAAA,OAEDC,yCAEEC,WAFsB,SAItB;MAAA,IAHEJ,WAAF,SAAEA,WAAF;QAAeC;MAAAA,IAEAI,sBAAbJ,WAAW;MAEb,IAAII,aAAa,GAAGJ,WAApB,EAAiC;QAC/B,OAAO;UAAEK,MAAM,EAAE;QAAV,CAAP;MACD;MACD,IAAMC,iBAAiB,GAAGF,aAAa,IAAIL,WAA3C;MACA,OAAO;QACLQ,OAAO,EAAED;MADJ,CAAP;IAGD;EAAA;EAAA;AAAA,EAzB6CV,cAAhD;AA2BA,eAAeC,wBAAf","names":["GestureHandler","IndiscreteGestureHandler","updateGestureConfig","minPointers","maxPointers","props","isGestureEnabledForEvent","_recognizer","pointerLength","failed","validPointerCount","success"],"sources":["IndiscreteGestureHandler.ts"],"sourcesContent":["import GestureHandler from './GestureHandler';\n\n/**\n * The base class for **Rotation** and **Pinch** gesture handlers.\n */\nabstract class IndiscreteGestureHandler extends GestureHandler {\n  get shouldEnableGestureOnSetup() {\n    return false;\n  }\n\n  updateGestureConfig({ minPointers = 2, maxPointers = 2, ...props }) {\n    return super.updateGestureConfig({\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  isGestureEnabledForEvent(\n    { minPointers, maxPointers }: any,\n    _recognizer: any,\n    { maxPointers: pointerLength }: any\n  ) {\n    if (pointerLength > maxPointers) {\n      return { failed: true };\n    }\n    const validPointerCount = pointerLength >= minPointers;\n    return {\n      success: validPointerCount,\n    };\n  }\n}\nexport default IndiscreteGestureHandler;\n"]},"metadata":{},"sourceType":"module"}