{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nvar NodeManager = function () {\n  function NodeManager() {\n    _classCallCheck(this, NodeManager);\n  }\n  _createClass(NodeManager, null, [{\n    key: \"getHandler\",\n    value: function getHandler(tag) {\n      if (tag in this.gestures) {\n        return this.gestures[tag];\n      }\n      throw new Error(\"No handler for tag \" + tag);\n    }\n  }, {\n    key: \"createGestureHandler\",\n    value: function createGestureHandler(handlerTag, handler) {\n      if (handlerTag in this.gestures) {\n        throw new Error(\"Handler with tag \" + handlerTag + \" already exists\");\n      }\n      this.gestures[handlerTag] = handler;\n      this.gestures[handlerTag].setTag(handlerTag);\n    }\n  }, {\n    key: \"dropGestureHandler\",\n    value: function dropGestureHandler(handlerTag) {\n      if (!(handlerTag in this.gestures)) {\n        return;\n      }\n      delete this.gestures[handlerTag];\n    }\n  }, {\n    key: \"getNodes\",\n    value: function getNodes() {\n      return _objectSpread({}, this.gestures);\n    }\n  }]);\n  return NodeManager;\n}();\nexport { NodeManager as default };\n_defineProperty(NodeManager, \"gestures\", {});","map":{"version":3,"sources":["NodeManager.ts"],"names":["NodeManager","getHandler","tag","gestures","Error","createGestureHandler","handlerTag","handler","setTag","dropGestureHandler","getNodes"],"mappings":";;;;;;;;;;;;;;;;;;IAI8BA,WAAf;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAMCC,oBAAWC,GAAD,EAAc;MACpC,IAAIA,GAAG,IAAI,IAAA,CAAKC,QAAhB,EAA0B;QACxB,OAAO,IAAA,CAAKA,QAAL,CAAcD,GAAd,CAAP;MACD;MAED,MAAM,IAAIE,KAAJ,yBAAgCF,GAAhC,CAAN;IACD;EAAA;IAAA;IAAA,OAEaG,8BACZC,UADgC,EAEhCC,OAFgC,EAG1B;MACN,IAAID,UAAU,IAAI,IAAA,CAAKH,QAAvB,EAAiC;QAC/B,MAAM,IAAIC,KAAJ,uBAA8BE,UAA9B,qBAAN;MACD;MAED,IAAA,CAAKH,QAAL,CAAcG,UAAd,CAAA,GAA4BC,OAA5B;MACA,IAAA,CAAKJ,QAAL,CAAcG,UAAd,CAAA,CAA0BE,MAA1B,CAAiCF,UAAjC,CAAA;IACD;EAAA;IAAA;IAAA,OAEaG,4BAAmBH,UAAD,EAA2B;MACzD,IAAI,EAAEA,UAAU,IAAI,IAAA,CAAKH,QAArB,CAAJ,EAAoC;QAClC;MAFuD;MAMzD,OAAO,IAAA,CAAKA,QAAL,CAAcG,UAAd,CAAP;IACD;EAAA;IAAA;IAAA,OAEaI,oBAAW;MACvB,yBAAY,IAAA,CAAKP,QAAAA;IAClB;EAAA;EAAA;AAAA;AAAA,SArC2BH,WAAf;gBAAeA,W,cAIxB,CAAA,C","sourcesContent":["import { ValueOf } from '../../typeUtils';\nimport { Gestures } from '../../RNGestureHandlerModule.web';\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport default abstract class NodeManager {\n  private static gestures: Record<\n    number,\n    InstanceType<ValueOf<typeof Gestures>>\n  > = {};\n\n  public static getHandler(tag: number) {\n    if (tag in this.gestures) {\n      return this.gestures[tag];\n    }\n\n    throw new Error(`No handler for tag ${tag}`);\n  }\n\n  public static createGestureHandler(\n    handlerTag: number,\n    handler: InstanceType<ValueOf<typeof Gestures>>\n  ): void {\n    if (handlerTag in this.gestures) {\n      throw new Error(`Handler with tag ${handlerTag} already exists`);\n    }\n\n    this.gestures[handlerTag] = handler;\n    this.gestures[handlerTag].setTag(handlerTag);\n  }\n\n  public static dropGestureHandler(handlerTag: number): void {\n    if (!(handlerTag in this.gestures)) {\n      return;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete this.gestures[handlerTag];\n  }\n\n  public static getNodes() {\n    return { ...this.gestures };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}