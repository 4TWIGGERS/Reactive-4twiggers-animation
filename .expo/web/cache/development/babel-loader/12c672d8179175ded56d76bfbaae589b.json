{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'invariant';\nimport { val } from \"../val\";\nvar AnimatedAlways = function (_AnimatedNode) {\n  _inherits(AnimatedAlways, _AnimatedNode);\n  var _super = _createSuper(AnimatedAlways);\n  function AnimatedAlways(what) {\n    var _this;\n    _classCallCheck(this, AnimatedAlways);\n    invariant(what instanceof AnimatedNode, \"Reanimated: Animated.always node argument should be of type AnimatedNode but got \" + what);\n    _this = _super.call(this, {\n      type: 'always',\n      what: what\n    }, [what]);\n    _this._what = what;\n    return _this;\n  }\n  _createClass(AnimatedAlways, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedAlways, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      this.__getValue();\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      val(this._what);\n      return 0;\n    }\n  }]);\n  return AnimatedAlways;\n}(AnimatedNode);\nexport function createAnimatedAlways(item) {\n  return new AnimatedAlways(item);\n}","map":{"version":3,"names":["AnimatedNode","invariant","val","AnimatedAlways","what","type","_what","__nodeID","__getValue","createAnimatedAlways","item"],"sources":["/Users/jeko/Documents/Reactive-4twiggers-animation/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedAlways.js"],"sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'invariant';\nimport { val } from '../val';\n\nclass AnimatedAlways extends AnimatedNode {\n  _what;\n\n  constructor(what) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.always node argument should be of type AnimatedNode but got ${what}`\n    );\n    super({ type: 'always', what }, [what]);\n    this._what = what;\n  }\n\n  toString() {\n    return `AnimatedAlways, id: ${this.__nodeID}`;\n  }\n\n  update() {\n    this.__getValue();\n  }\n\n  __onEvaluate() {\n    val(this._what);\n    return 0;\n  }\n}\n\nexport function createAnimatedAlways(item) {\n  return new AnimatedAlways(item);\n}\n"],"mappings":";;;;;;;AAAA,OAAOA,YAAY;AACnB,OAAOC,SAAS,MAAM,WAAW;AACjC,SAASC,GAAG;AAAiB,IAEvBC,cAAc;EAAA;EAAA;EAGlB,wBAAYC,IAAI,EAAE;IAAA;IAAA;IAChBH,SAAS,CACPG,IAAI,YAAYJ,YAAY,wFACwDI,IAAI,CACzF;IACD,0BAAM;MAAEC,IAAI,EAAE,QAAQ;MAAED,IAAI,EAAJA;IAAK,CAAC,EAAE,CAACA,IAAI,CAAC;IACtC,MAAKE,KAAK,GAAGF,IAAI;IAAC;EACpB;EAAC;IAAA;IAAA,OAED,oBAAW;MACT,gCAA8B,IAAI,CAACG,QAAQ;IAC7C;EAAC;IAAA;IAAA,OAED,kBAAS;MACP,IAAI,CAACC,UAAU,EAAE;IACnB;EAAC;IAAA;IAAA,OAED,wBAAe;MACbN,GAAG,CAAC,IAAI,CAACI,KAAK,CAAC;MACf,OAAO,CAAC;IACV;EAAC;EAAA;AAAA,EAvB0BN,YAAY;AA0BzC,OAAO,SAASS,oBAAoB,CAACC,IAAI,EAAE;EACzC,OAAO,IAAIP,cAAc,CAACO,IAAI,CAAC;AACjC"},"metadata":{},"sourceType":"module"}