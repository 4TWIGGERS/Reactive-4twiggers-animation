{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { val } from \"../val\";\nimport AnimatedNode from \"./AnimatedNode\";\nimport invariant from 'invariant';\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\nvar float32ArraySupported = typeof Float32Array === 'function';\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX = 0;\n  var currentT = 0;\n  var i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);\n  return currentT;\n}\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\nfunction bezier(mX1, mY1, mX2, mY2) {\n  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);\n    }\n  }\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x;\n    }\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\nvar AnimatedBezier = function (_AnimatedNode) {\n  _inherits(AnimatedBezier, _AnimatedNode);\n  var _super = _createSuper(AnimatedBezier);\n  function AnimatedBezier(value, mX1, mY1, mX2, mY2) {\n    var _this;\n    _classCallCheck(this, AnimatedBezier);\n    invariant(value instanceof AnimatedNode, \"Reanimated: Bezier node argument should be of type AnimatedNode but got \" + value);\n    _this = _super.call(this, {\n      type: 'bezier',\n      mX1: mX1,\n      mY1: mY1,\n      mX2: mX2,\n      mY2: mY2,\n      input: value\n    }, [value]);\n    _this._value = value;\n    _this._bezier = bezier(mX1, mY1, mX2, mY2);\n    return _this;\n  }\n  _createClass(AnimatedBezier, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"AnimatedBezier, id: \" + this.__nodeID;\n    }\n  }, {\n    key: \"__onEvaluate\",\n    value: function __onEvaluate() {\n      return this._bezier(val(this._value));\n    }\n  }]);\n  return AnimatedBezier;\n}(AnimatedNode);\nexport { AnimatedBezier as default };","map":{"version":3,"names":["val","AnimatedNode","invariant","NEWTON_ITERATIONS","NEWTON_MIN_SLOPE","SUBDIVISION_PRECISION","SUBDIVISION_MAX_ITERATIONS","kSplineTableSize","kSampleStepSize","float32ArraySupported","Float32Array","A","aA1","aA2","B","C","calcBezier","aT","getSlope","binarySubdivide","aX","aA","aB","mX1","mX2","currentX","currentT","i","Math","abs","newtonRaphsonIterate","aGuessT","currentSlope","bezier","mY1","mY2","sampleValues","Array","getTForX","intervalStart","currentSample","lastSample","dist","guessForT","initialSlope","BezierEasing","x","AnimatedBezier","value","type","input","_value","_bezier","__nodeID"],"sources":["/Users/jeko/Documents/Reactive-4twiggers-animation/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBezier.js"],"sourcesContent":["import { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport invariant from 'invariant';\n\n// These values are established by empiricism with tests (tradeoff: performance VS precision)\nvar NEWTON_ITERATIONS = 4;\nvar NEWTON_MIN_SLOPE = 0.001;\nvar SUBDIVISION_PRECISION = 0.0000001;\nvar SUBDIVISION_MAX_ITERATIONS = 10;\n\nvar kSplineTableSize = 11;\nvar kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);\n\nvar float32ArraySupported = typeof Float32Array === 'function';\n\nfunction A(aA1, aA2) {\n  return 1.0 - 3.0 * aA2 + 3.0 * aA1;\n}\nfunction B(aA1, aA2) {\n  return 3.0 * aA2 - 6.0 * aA1;\n}\nfunction C(aA1) {\n  return 3.0 * aA1;\n}\n\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nfunction calcBezier(aT, aA1, aA2) {\n  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;\n}\n\n// Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.\nfunction getSlope(aT, aA1, aA2) {\n  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);\n}\n\nfunction binarySubdivide(aX, aA, aB, mX1, mX2) {\n  var currentX = 0;\n  var currentT = 0;\n  var i = 0;\n  do {\n    currentT = aA + (aB - aA) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - aX;\n    if (currentX > 0.0) {\n      aB = currentT;\n    } else {\n      aA = currentT;\n    }\n  } while (\n    Math.abs(currentX) > SUBDIVISION_PRECISION &&\n    ++i < SUBDIVISION_MAX_ITERATIONS\n  );\n  return currentT;\n}\n\nfunction newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {\n  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {\n    var currentSlope = getSlope(aGuessT, mX1, mX2);\n    if (currentSlope === 0.0) {\n      return aGuessT;\n    }\n    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;\n    aGuessT -= currentX / currentSlope;\n  }\n  return aGuessT;\n}\n\nfunction bezier(mX1, mY1, mX2, mY2) {\n  // Precompute samples table\n  var sampleValues = float32ArraySupported\n    ? new Float32Array(kSplineTableSize)\n    : new Array(kSplineTableSize);\n  if (mX1 !== mY1 || mX2 !== mY2) {\n    for (var i = 0; i < kSplineTableSize; ++i) {\n      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);\n    }\n  }\n\n  function getTForX(aX) {\n    var intervalStart = 0.0;\n    var currentSample = 1;\n    var lastSample = kSplineTableSize - 1;\n\n    for (\n      ;\n      currentSample !== lastSample && sampleValues[currentSample] <= aX;\n      ++currentSample\n    ) {\n      intervalStart += kSampleStepSize;\n    }\n    --currentSample;\n\n    // Interpolate to provide an initial guess for t\n    var dist =\n      (aX - sampleValues[currentSample]) /\n      (sampleValues[currentSample + 1] - sampleValues[currentSample]);\n    var guessForT = intervalStart + dist * kSampleStepSize;\n\n    var initialSlope = getSlope(guessForT, mX1, mX2);\n    if (initialSlope >= NEWTON_MIN_SLOPE) {\n      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);\n    } else if (initialSlope === 0.0) {\n      return guessForT;\n    } else {\n      return binarySubdivide(\n        aX,\n        intervalStart,\n        intervalStart + kSampleStepSize,\n        mX1,\n        mX2\n      );\n    }\n  }\n\n  return function BezierEasing(x) {\n    if (mX1 === mY1 && mX2 === mY2) {\n      return x; // linear\n    }\n    // Because JavaScript number are imprecise, we should guarantee the extremes are right.\n    if (x === 0) {\n      return 0;\n    }\n    if (x === 1) {\n      return 1;\n    }\n    return calcBezier(getTForX(x), mY1, mY2);\n  };\n}\n\nexport default class AnimatedBezier extends AnimatedNode {\n  _value;\n  _bezier;\n\n  constructor(value, mX1, mY1, mX2, mY2) {\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Bezier node argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'bezier', mX1, mY1, mX2, mY2, input: value }, [value]);\n    this._value = value;\n    this._bezier = bezier(mX1, mY1, mX2, mY2);\n  }\n\n  toString() {\n    return `AnimatedBezier, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    return this._bezier(val(this._value));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}