{"ast":null,"code":"import { isJestEnv } from \"../utils\";\nexport var handlerIDToTag = {};\nvar gestures = new Map();\nvar oldHandlers = new Map();\nvar testIDs = new Map();\nvar handlerTag = 1;\nexport function getNextHandlerTag() {\n  return handlerTag++;\n}\nexport function registerHandler(handlerTag, handler, testID) {\n  gestures.set(handlerTag, handler);\n  if (isJestEnv() && testID) {\n    testIDs.set(testID, handlerTag);\n  }\n}\nexport function registerOldGestureHandler(handlerTag, handler) {\n  oldHandlers.set(handlerTag, handler);\n}\nexport function unregisterHandler(handlerTag, testID) {\n  gestures.delete(handlerTag);\n  if (isJestEnv() && testID) {\n    testIDs.delete(testID);\n  }\n}\nexport function findHandler(handlerTag) {\n  return gestures.get(handlerTag);\n}\nexport function findOldGestureHandler(handlerTag) {\n  return oldHandlers.get(handlerTag);\n}\nexport function findHandlerByTestID(testID) {\n  var handlerTag = testIDs.get(testID);\n  if (handlerTag !== undefined) {\n    var _findHandler;\n    return (_findHandler = findHandler(handlerTag)) !== null && _findHandler !== void 0 ? _findHandler : null;\n  }\n  return null;\n}","map":{"version":3,"sources":["handlersRegistry.ts"],"names":["isJestEnv","handlerIDToTag","gestures","Map","oldHandlers","testIDs","handlerTag","getNextHandlerTag","registerHandler","handler","testID","set","registerOldGestureHandler","unregisterHandler","delete","findHandler","get","findOldGestureHandler","findHandlerByTestID","undefined"],"mappings":"AAAA,SAASA,SAAT;AAIA,OAAO,IAAMC,cAAsC,GAAG,CAAA,CAA/C;AACP,IAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AACA,IAAMC,WAAW,GAAG,IAAID,GAAJ,EAApB;AACA,IAAME,OAAO,GAAG,IAAIF,GAAJ,EAAhB;AAEA,IAAIG,UAAU,GAAG,CAAjB;AAEA,OAAO,SAASC,iBAAT,GAAqC;EAC1C,OAAOD,UAAU,EAAjB;AACD;AAED,OAAO,SAASE,eAAT,CACLF,UADK,EAELG,OAFK,EAGLC,MAHK,EAIL;EACAR,QAAQ,CAACS,GAATT,CAAaI,UAAbJ,EAAyBO,OAAzBP,CAAAA;EACA,IAAIF,SAAS,EAAA,IAAMU,MAAnB,EAA2B;IACzBL,OAAO,CAACM,GAARN,CAAYK,MAAZL,EAAoBC,UAApBD,CAAAA;EACD;AACF;AAED,OAAO,SAASO,yBAAT,CACLN,UADK,EAELG,OAFK,EAGL;EACAL,WAAW,CAACO,GAAZP,CAAgBE,UAAhBF,EAA4BK,OAA5BL,CAAAA;AACD;AAED,OAAO,SAASS,iBAAT,CAA2BP,UAA3B,EAA+CI,MAA/C,EAAgE;EACrER,QAAQ,CAACY,MAATZ,CAAgBI,UAAhBJ,CAAAA;EACA,IAAIF,SAAS,EAAA,IAAMU,MAAnB,EAA2B;IACzBL,OAAO,CAACS,MAART,CAAeK,MAAfL,CAAAA;EACD;AACF;AAED,OAAO,SAASU,WAAT,CAAqBT,UAArB,EAAyC;EAC9C,OAAOJ,QAAQ,CAACc,GAATd,CAAaI,UAAbJ,CAAP;AACD;AAED,OAAO,SAASe,qBAAT,CAA+BX,UAA/B,EAAmD;EACxD,OAAOF,WAAW,CAACY,GAAZZ,CAAgBE,UAAhBF,CAAP;AACD;AAED,OAAO,SAASc,mBAAT,CAA6BR,MAA7B,EAA6C;EAClD,IAAMJ,UAAU,GAAGD,OAAO,CAACW,GAARX,CAAYK,MAAZL,CAAnB;EACA,IAAIC,UAAU,KAAKa,SAAnB,EAA8B;IAAA,IAAA,YAAA;IAC5B,OAAA,CAAA,YAAA,GAAOJ,WAAW,CAACT,UAAD,CAAlB,MAAA,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,YAAA,GAAkC,IAAlC;EACD;EACD,OAAO,IAAP;AACD","sourcesContent":["import { isJestEnv } from '../utils';\nimport { GestureType } from './gestures/gesture';\nimport { GestureEvent, HandlerStateChangeEvent } from './gestureHandlerCommon';\n\nexport const handlerIDToTag: Record<string, number> = {};\nconst gestures = new Map<number, GestureType>();\nconst oldHandlers = new Map<number, GestureHandlerCallbacks>();\nconst testIDs = new Map<string, number>();\n\nlet handlerTag = 1;\n\nexport function getNextHandlerTag(): number {\n  return handlerTag++;\n}\n\nexport function registerHandler(\n  handlerTag: number,\n  handler: GestureType,\n  testID?: string\n) {\n  gestures.set(handlerTag, handler);\n  if (isJestEnv() && testID) {\n    testIDs.set(testID, handlerTag);\n  }\n}\n\nexport function registerOldGestureHandler(\n  handlerTag: number,\n  handler: GestureHandlerCallbacks\n) {\n  oldHandlers.set(handlerTag, handler);\n}\n\nexport function unregisterHandler(handlerTag: number, testID?: string) {\n  gestures.delete(handlerTag);\n  if (isJestEnv() && testID) {\n    testIDs.delete(testID);\n  }\n}\n\nexport function findHandler(handlerTag: number) {\n  return gestures.get(handlerTag);\n}\n\nexport function findOldGestureHandler(handlerTag: number) {\n  return oldHandlers.get(handlerTag);\n}\n\nexport function findHandlerByTestID(testID: string) {\n  const handlerTag = testIDs.get(testID);\n  if (handlerTag !== undefined) {\n    return findHandler(handlerTag) ?? null;\n  }\n  return null;\n}\n\nexport interface GestureHandlerCallbacks {\n  onGestureEvent: (event: GestureEvent<any>) => void;\n  onGestureStateChange: (event: HandlerStateChangeEvent<any>) => void;\n}\n"]},"metadata":{},"sourceType":"module"}