{"ast":null,"code":"import React from 'react';\nimport { isExperimentalWebImplementationEnabled } from \"./EnableExperimentalWebImplementation\";\nimport InteractionManager from \"./web/tools/InteractionManager\";\nimport NodeManager from \"./web/tools/NodeManager\";\nimport PanGestureHandler from \"./web/handlers/PanGestureHandler\";\nimport TapGestureHandler from \"./web/handlers/TapGestureHandler\";\nimport LongPressGestureHandler from \"./web/handlers/LongPressGestureHandler\";\nimport PinchGestureHandler from \"./web/handlers/PinchGestureHandler\";\nimport RotationGestureHandler from \"./web/handlers/RotationGestureHandler\";\nimport FlingGestureHandler from \"./web/handlers/FlingGestureHandler\";\nimport NativeViewGestureHandler from \"./web/handlers/NativeViewGestureHandler\";\nimport ManualGestureHandler from \"./web/handlers/ManualGestureHandler\";\nimport * as HammerNodeManager from \"./web_hammer/NodeManager\";\nimport HammerNativeViewGestureHandler from \"./web_hammer/NativeViewGestureHandler\";\nimport HammerPanGestureHandler from \"./web_hammer/PanGestureHandler\";\nimport HammerTapGestureHandler from \"./web_hammer/TapGestureHandler\";\nimport HammerLongPressGestureHandler from \"./web_hammer/LongPressGestureHandler\";\nimport HammerPinchGestureHandler from \"./web_hammer/PinchGestureHandler\";\nimport HammerRotationGestureHandler from \"./web_hammer/RotationGestureHandler\";\nimport HammerFlingGestureHandler from \"./web_hammer/FlingGestureHandler\";\nexport var Gestures = {\n  NativeViewGestureHandler: NativeViewGestureHandler,\n  PanGestureHandler: PanGestureHandler,\n  TapGestureHandler: TapGestureHandler,\n  LongPressGestureHandler: LongPressGestureHandler,\n  PinchGestureHandler: PinchGestureHandler,\n  RotationGestureHandler: RotationGestureHandler,\n  FlingGestureHandler: FlingGestureHandler,\n  ManualGestureHandler: ManualGestureHandler\n};\nexport var HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler\n};\nexport default {\n  handleSetJSResponder: function handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder: function handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler: function createGestureHandler(handlerName, handlerTag, config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n      }\n      var GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag), config);\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\"react-native-gesture-handler: \" + handlerName + \" is not supported on web.\");\n      }\n      var _GestureClass = HammerGestures[handlerName];\n      HammerNodeManager.createGestureHandler(handlerTag, new _GestureClass());\n    }\n    this.updateGestureHandler(handlerTag, config);\n  },\n  attachGestureHandler: function attachGestureHandler(handlerTag, newView, _actionType, propsRef) {\n    if (!(newView instanceof HTMLElement || newView instanceof React.Component)) {\n      return;\n    }\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler: function updateGestureHandler(handlerTag, newConfig) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n      InteractionManager.getInstance().configureInteractions(NodeManager.getHandler(handlerTag), newConfig);\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode: function getGestureHandlerNode(handlerTag) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler: function dropGestureHandler(handlerTag) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  flushOperations: function flushOperations() {}\n};","map":{"version":3,"sources":["RNGestureHandlerModule.web.ts"],"names":["React","isExperimentalWebImplementationEnabled","InteractionManager","NodeManager","PanGestureHandler","TapGestureHandler","LongPressGestureHandler","PinchGestureHandler","RotationGestureHandler","FlingGestureHandler","NativeViewGestureHandler","ManualGestureHandler","HammerNodeManager","HammerNativeViewGestureHandler","HammerPanGestureHandler","HammerTapGestureHandler","HammerLongPressGestureHandler","HammerPinchGestureHandler","HammerRotationGestureHandler","HammerFlingGestureHandler","Gestures","HammerGestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","getInstance","configureInteractions","getHandler","updateGestureHandler","attachGestureHandler","newView","_actionType","propsRef","HTMLElement","Component","init","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler","flushOperations"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { ActionType } from './ActionType';\nimport { isExperimentalWebImplementationEnabled } from './EnableExperimentalWebImplementation';\n\n//GestureHandlers\nimport InteractionManager from './web/tools/InteractionManager';\nimport NodeManager from './web/tools/NodeManager';\nimport PanGestureHandler from './web/handlers/PanGestureHandler';\nimport TapGestureHandler from './web/handlers/TapGestureHandler';\nimport LongPressGestureHandler from './web/handlers/LongPressGestureHandler';\nimport PinchGestureHandler from './web/handlers/PinchGestureHandler';\nimport RotationGestureHandler from './web/handlers/RotationGestureHandler';\nimport FlingGestureHandler from './web/handlers/FlingGestureHandler';\nimport NativeViewGestureHandler from './web/handlers/NativeViewGestureHandler';\nimport ManualGestureHandler from './web/handlers/ManualGestureHandler';\n\n//Hammer Handlers\nimport * as HammerNodeManager from './web_hammer/NodeManager';\nimport HammerNativeViewGestureHandler from './web_hammer/NativeViewGestureHandler';\nimport HammerPanGestureHandler from './web_hammer/PanGestureHandler';\nimport HammerTapGestureHandler from './web_hammer/TapGestureHandler';\nimport HammerLongPressGestureHandler from './web_hammer/LongPressGestureHandler';\nimport HammerPinchGestureHandler from './web_hammer/PinchGestureHandler';\nimport HammerRotationGestureHandler from './web_hammer/RotationGestureHandler';\nimport HammerFlingGestureHandler from './web_hammer/FlingGestureHandler';\nimport { Config } from './web/interfaces';\n\nexport const Gestures = {\n  NativeViewGestureHandler,\n  PanGestureHandler,\n  TapGestureHandler,\n  LongPressGestureHandler,\n  PinchGestureHandler,\n  RotationGestureHandler,\n  FlingGestureHandler,\n  ManualGestureHandler,\n};\n\nexport const HammerGestures = {\n  NativeViewGestureHandler: HammerNativeViewGestureHandler,\n  PanGestureHandler: HammerPanGestureHandler,\n  TapGestureHandler: HammerTapGestureHandler,\n  LongPressGestureHandler: HammerLongPressGestureHandler,\n  PinchGestureHandler: HammerPinchGestureHandler,\n  RotationGestureHandler: HammerRotationGestureHandler,\n  FlingGestureHandler: HammerFlingGestureHandler,\n};\n\nexport default {\n  handleSetJSResponder(tag: number, blockNativeResponder: boolean) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n  createGestureHandler<T>(\n    handlerName: keyof typeof Gestures,\n    handlerTag: number,\n    config: T\n  ) {\n    if (isExperimentalWebImplementationEnabled()) {\n      if (!(handlerName in Gestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      const GestureClass = Gestures[handlerName];\n      NodeManager.createGestureHandler(handlerTag, new GestureClass());\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        config as unknown as Config\n      );\n    } else {\n      if (!(handlerName in HammerGestures)) {\n        throw new Error(\n          `react-native-gesture-handler: ${handlerName} is not supported on web.`\n        );\n      }\n\n      // @ts-ignore If it doesn't exist, the error is thrown\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      const GestureClass = HammerGestures[handlerName];\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n    }\n\n    this.updateGestureHandler(handlerTag, config as unknown as Config);\n  },\n  attachGestureHandler(\n    handlerTag: number,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    newView: any,\n    _actionType: ActionType,\n    propsRef: React.RefObject<unknown>\n  ) {\n    if (\n      !(newView instanceof HTMLElement || newView instanceof React.Component)\n    ) {\n      return;\n    }\n\n    if (isExperimentalWebImplementationEnabled()) {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      NodeManager.getHandler(handlerTag).init(newView, propsRef);\n    } else {\n      //@ts-ignore Types should be HTMLElement or React.Component\n      HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n    }\n  },\n  updateGestureHandler(handlerTag: number, newConfig: Config) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n\n      InteractionManager.getInstance().configureInteractions(\n        NodeManager.getHandler(handlerTag),\n        newConfig\n      );\n    } else {\n      HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n    }\n  },\n  getGestureHandlerNode(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      return NodeManager.getHandler(handlerTag);\n    } else {\n      return HammerNodeManager.getHandler(handlerTag);\n    }\n  },\n  dropGestureHandler(handlerTag: number) {\n    if (isExperimentalWebImplementationEnabled()) {\n      NodeManager.dropGestureHandler(handlerTag);\n    } else {\n      HammerNodeManager.dropGestureHandler(handlerTag);\n    }\n  },\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  flushOperations() {},\n};\n"]},"metadata":{},"sourceType":"module"}