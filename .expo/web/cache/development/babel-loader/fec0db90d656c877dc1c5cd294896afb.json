{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _reactNative = require(\"react-native-web/dist/index\");\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2.default)(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar PRESS_RETENTION_OFFSET = {\n  top: 20,\n  left: 20,\n  right: 20,\n  bottom: 30\n};\nvar Mixin = _reactNative.Touchable.Mixin;\nvar _touchableHandleStartShouldSetResponder = Mixin.touchableHandleStartShouldSetResponder,\n  _touchableHandleResponderTerminationRequest = Mixin.touchableHandleResponderTerminationRequest,\n  _touchableHandleResponderGrant = Mixin.touchableHandleResponderGrant,\n  _touchableHandleResponderMove = Mixin.touchableHandleResponderMove,\n  _touchableHandleResponderRelease = Mixin.touchableHandleResponderRelease,\n  _touchableHandleResponderTerminate = Mixin.touchableHandleResponderTerminate,\n  touchableGetInitialState = Mixin.touchableGetInitialState;\nvar SvgTouchableMixin = _objectSpread(_objectSpread({}, Mixin), {}, {\n  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder(e) {\n    var onStartShouldSetResponder = this.props.onStartShouldSetResponder;\n    if (onStartShouldSetResponder) {\n      return onStartShouldSetResponder(e);\n    } else {\n      return _touchableHandleStartShouldSetResponder.call(this, e);\n    }\n  },\n  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest(e) {\n    var onResponderTerminationRequest = this.props.onResponderTerminationRequest;\n    if (onResponderTerminationRequest) {\n      return onResponderTerminationRequest(e);\n    } else {\n      return _touchableHandleResponderTerminationRequest.call(this, e);\n    }\n  },\n  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {\n    var onResponderGrant = this.props.onResponderGrant;\n    if (onResponderGrant) {\n      return onResponderGrant(e);\n    } else {\n      return _touchableHandleResponderGrant.call(this, e);\n    }\n  },\n  touchableHandleResponderMove: function touchableHandleResponderMove(e) {\n    var onResponderMove = this.props.onResponderMove;\n    if (onResponderMove) {\n      return onResponderMove(e);\n    } else {\n      return _touchableHandleResponderMove.call(this, e);\n    }\n  },\n  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {\n    var onResponderRelease = this.props.onResponderRelease;\n    if (onResponderRelease) {\n      return onResponderRelease(e);\n    } else {\n      return _touchableHandleResponderRelease.call(this, e);\n    }\n  },\n  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {\n    var onResponderTerminate = this.props.onResponderTerminate;\n    if (onResponderTerminate) {\n      return onResponderTerminate(e);\n    } else {\n      return _touchableHandleResponderTerminate.call(this, e);\n    }\n  },\n  touchableHandlePress: function touchableHandlePress(e) {\n    var onPress = this.props.onPress;\n    onPress && onPress(e);\n  },\n  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {\n    var onPressIn = this.props.onPressIn;\n    onPressIn && onPressIn(e);\n  },\n  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {\n    var onPressOut = this.props.onPressOut;\n    onPressOut && onPressOut(e);\n  },\n  touchableHandleLongPress: function touchableHandleLongPress(e) {\n    var onLongPress = this.props.onLongPress;\n    onLongPress && onLongPress(e);\n  },\n  touchableGetPressRectOffset: function touchableGetPressRectOffset() {\n    var pressRetentionOffset = this.props.pressRetentionOffset;\n    return pressRetentionOffset || PRESS_RETENTION_OFFSET;\n  },\n  touchableGetHitSlop: function touchableGetHitSlop() {\n    var hitSlop = this.props.hitSlop;\n    return hitSlop;\n  },\n  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {\n    var delayPressIn = this.props.delayPressIn;\n    return delayPressIn || 0;\n  },\n  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {\n    var delayLongPress = this.props.delayLongPress;\n    return delayLongPress === 0 ? 0 : delayLongPress || 500;\n  },\n  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {\n    var delayPressOut = this.props.delayPressOut;\n    return delayPressOut || 0;\n  }\n});\nvar touchKeys = Object.keys(SvgTouchableMixin);\nvar touchVals = touchKeys.map(function (key) {\n  return SvgTouchableMixin[key];\n});\nvar numTouchKeys = touchKeys.length;\nvar _default = function _default(target) {\n  for (var i = 0; i < numTouchKeys; i++) {\n    var key = touchKeys[i];\n    var val = touchVals[i];\n    if (typeof val === 'function') {\n      target[key] = val.bind(target);\n    } else {\n      target[key] = val;\n    }\n  }\n  target.state = touchableGetInitialState();\n};\nexports.default = _default;","map":{"version":3,"mappings":"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","names":["PRESS_RETENTION_OFFSET","top","left","right","bottom","Mixin","Touchable","touchableHandleStartShouldSetResponder","touchableHandleResponderTerminationRequest","touchableHandleResponderGrant","touchableHandleResponderMove","touchableHandleResponderRelease","touchableHandleResponderTerminate","touchableGetInitialState","SvgTouchableMixin","e","onStartShouldSetResponder","props","call","onResponderTerminationRequest","onResponderGrant","onResponderMove","onResponderRelease","onResponderTerminate","touchableHandlePress","onPress","touchableHandleActivePressIn","onPressIn","touchableHandleActivePressOut","onPressOut","touchableHandleLongPress","onLongPress","touchableGetPressRectOffset","pressRetentionOffset","touchableGetHitSlop","hitSlop","touchableGetHighlightDelayMS","delayPressIn","touchableGetLongPressDelayMS","delayLongPress","touchableGetPressOutDelayMS","delayPressOut","touchKeys","Object","keys","touchVals","map","key","numTouchKeys","length","target","i","val","bind","state"],"sources":["SvgTouchableMixin.ts"],"sourcesContent":["// @ts-ignore\nimport { Touchable, GestureResponderEvent } from 'react-native';\nconst PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };\n// @ts-ignore\nconst { Mixin } = Touchable;\nconst {\n  touchableHandleStartShouldSetResponder,\n  touchableHandleResponderTerminationRequest,\n  touchableHandleResponderGrant,\n  touchableHandleResponderMove,\n  touchableHandleResponderRelease,\n  touchableHandleResponderTerminate,\n  touchableGetInitialState,\n} = Mixin;\n\nconst SvgTouchableMixin = {\n  ...Mixin,\n\n  touchableHandleStartShouldSetResponder(e: GestureResponderEvent) {\n    const { onStartShouldSetResponder } = this.props;\n    if (onStartShouldSetResponder) {\n      return onStartShouldSetResponder(e);\n    } else {\n      return touchableHandleStartShouldSetResponder.call(this, e);\n    }\n  },\n\n  touchableHandleResponderTerminationRequest(e: GestureResponderEvent) {\n    const { onResponderTerminationRequest } = this.props;\n    if (onResponderTerminationRequest) {\n      return onResponderTerminationRequest(e);\n    } else {\n      return touchableHandleResponderTerminationRequest.call(this, e);\n    }\n  },\n\n  touchableHandleResponderGrant(e: GestureResponderEvent) {\n    const { onResponderGrant } = this.props;\n    if (onResponderGrant) {\n      return onResponderGrant(e);\n    } else {\n      return touchableHandleResponderGrant.call(this, e);\n    }\n  },\n\n  touchableHandleResponderMove(e: GestureResponderEvent) {\n    const { onResponderMove } = this.props;\n    if (onResponderMove) {\n      return onResponderMove(e);\n    } else {\n      return touchableHandleResponderMove.call(this, e);\n    }\n  },\n\n  touchableHandleResponderRelease(e: GestureResponderEvent) {\n    const { onResponderRelease } = this.props;\n    if (onResponderRelease) {\n      return onResponderRelease(e);\n    } else {\n      return touchableHandleResponderRelease.call(this, e);\n    }\n  },\n\n  touchableHandleResponderTerminate(e: GestureResponderEvent) {\n    const { onResponderTerminate } = this.props;\n    if (onResponderTerminate) {\n      return onResponderTerminate(e);\n    } else {\n      return touchableHandleResponderTerminate.call(this, e);\n    }\n  },\n\n  touchableHandlePress(e: GestureResponderEvent) {\n    const { onPress } = this.props;\n    onPress && onPress(e);\n  },\n\n  touchableHandleActivePressIn(e: GestureResponderEvent) {\n    const { onPressIn } = this.props;\n    onPressIn && onPressIn(e);\n  },\n\n  touchableHandleActivePressOut(e: GestureResponderEvent) {\n    const { onPressOut } = this.props;\n    onPressOut && onPressOut(e);\n  },\n\n  touchableHandleLongPress(e: GestureResponderEvent) {\n    const { onLongPress } = this.props;\n    onLongPress && onLongPress(e);\n  },\n\n  touchableGetPressRectOffset() {\n    const { pressRetentionOffset } = this.props;\n    return pressRetentionOffset || PRESS_RETENTION_OFFSET;\n  },\n\n  touchableGetHitSlop() {\n    const { hitSlop } = this.props;\n    return hitSlop;\n  },\n\n  touchableGetHighlightDelayMS() {\n    const { delayPressIn } = this.props;\n    return delayPressIn || 0;\n  },\n\n  touchableGetLongPressDelayMS() {\n    const { delayLongPress } = this.props;\n    return delayLongPress === 0 ? 0 : delayLongPress || 500;\n  },\n\n  touchableGetPressOutDelayMS() {\n    const { delayPressOut } = this.props;\n    return delayPressOut || 0;\n  },\n};\n\nconst touchKeys = Object.keys(SvgTouchableMixin);\nconst touchVals = touchKeys.map(key => SvgTouchableMixin[key]);\nconst numTouchKeys = touchKeys.length;\n\nexport default (target: { [x: string]: unknown; state: unknown }) => {\n  for (let i = 0; i < numTouchKeys; i++) {\n    const key = touchKeys[i];\n    const val = touchVals[i];\n    if (typeof val === 'function') {\n      target[key] = val.bind(target);\n    } else {\n      target[key] = val;\n    }\n  }\n  target.state = touchableGetInitialState();\n};\n"]},"metadata":{},"sourceType":"script"}