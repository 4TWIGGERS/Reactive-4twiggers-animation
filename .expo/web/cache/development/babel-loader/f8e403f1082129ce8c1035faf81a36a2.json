{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"tension\", \"friction\"],\n  _excluded2 = [\"bounciness\", \"speed\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { cond, sub, divide, multiply, add, pow, lessOrEq, and, greaterThan } from \"./../base\";\nimport AnimatedValue from \"./../core/InternalAnimatedValue\";\nfunction stiffnessFromOrigamiValue(oValue) {\n  return (oValue - 30) * 3.62 + 194;\n}\nfunction dampingFromOrigamiValue(oValue) {\n  return (oValue - 8) * 3 + 25;\n}\nfunction stiffnessFromOrigamiNode(oValue) {\n  return add(multiply(sub(oValue, 30), 3.62), 194);\n}\nfunction dampingFromOrigamiNode(oValue) {\n  return add(multiply(sub(oValue, 8), 3), 25);\n}\nfunction makeConfigFromOrigamiTensionAndFriction(prevConfig) {\n  var tension = prevConfig.tension,\n    friction = prevConfig.friction,\n    rest = _objectWithoutProperties(prevConfig, _excluded);\n  return _objectSpread(_objectSpread({}, rest), {}, {\n    stiffness: typeof tension === 'number' ? stiffnessFromOrigamiValue(tension) : stiffnessFromOrigamiNode(tension),\n    damping: typeof friction === 'number' ? dampingFromOrigamiValue(friction) : dampingFromOrigamiNode(friction)\n  });\n}\nfunction makeConfigFromBouncinessAndSpeed(prevConfig) {\n  var bounciness = prevConfig.bounciness,\n    speed = prevConfig.speed,\n    rest = _objectWithoutProperties(prevConfig, _excluded2);\n  if (typeof bounciness === 'number' && typeof speed === 'number') {\n    return fromBouncinessAndSpeedNumbers(bounciness, speed, rest);\n  }\n  return fromBouncinessAndSpeedNodes(bounciness, speed, rest);\n}\nfunction fromBouncinessAndSpeedNodes(bounciness, speed, rest) {\n  function normalize(value, startValue, endValue) {\n    return divide(sub(value, startValue), sub(endValue, startValue));\n  }\n  function projectNormal(n, start, end) {\n    return add(start, multiply(n, sub(end, start)));\n  }\n  function linearInterpolation(t, start, end) {\n    return add(multiply(t, end), multiply(sub(1, t), start));\n  }\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(sub(multiply(2, t), multiply(t, t)), start, end);\n  }\n  function b3Friction1(x) {\n    return add(sub(multiply(0.0007, pow(x, 3)), multiply(0.031, pow(x, 2))), multiply(0.64, x), 1.28);\n  }\n  function b3Friction2(x) {\n    return add(sub(multiply(0.000044, pow(x, 3)), multiply(0.006, pow(x, 2))), multiply(0.36, x), 2);\n  }\n  function b3Friction3(x) {\n    return add(sub(multiply(0.00000045, pow(x, 3)), multiply(0.000332, pow(x, 2))), multiply(0.1078, x), 5.84);\n  }\n  function b3Nobounce(tension) {\n    return cond(lessOrEq(tension, 18), b3Friction1(tension), cond(and(greaterThan(tension, 18), lessOrEq(tension, 44)), b3Friction2(tension), b3Friction3(tension)));\n  }\n  var b = normalize(divide(bounciness, 1.7), 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  var s = normalize(divide(speed, 1.7), 0, 20);\n  var bouncyTension = projectNormal(s, 0.5, 200);\n  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);\n  return _objectSpread(_objectSpread({}, rest), {}, {\n    stiffness: stiffnessFromOrigamiNode(bouncyTension),\n    damping: dampingFromOrigamiNode(bouncyFriction)\n  });\n}\nfunction fromBouncinessAndSpeedNumbers(bounciness, speed, rest) {\n  function normalize(value, startValue, endValue) {\n    return (value - startValue) / (endValue - startValue);\n  }\n  function projectNormal(n, start, end) {\n    return start + n * (end - start);\n  }\n  function linearInterpolation(t, start, end) {\n    return t * end + (1 - t) * start;\n  }\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(2 * t - t * t, start, end);\n  }\n  function b3Friction1(x) {\n    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;\n  }\n  function b3Friction2(x) {\n    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;\n  }\n  function b3Friction3(x) {\n    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;\n  }\n  function b3Nobounce(tension) {\n    if (tension <= 18) {\n      return b3Friction1(tension);\n    } else if (tension > 18 && tension <= 44) {\n      return b3Friction2(tension);\n    } else {\n      return b3Friction3(tension);\n    }\n  }\n  var b = normalize(bounciness / 1.7, 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  var s = normalize(speed / 1.7, 0, 20);\n  var bouncyTension = projectNormal(s, 0.5, 200);\n  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);\n  return _objectSpread(_objectSpread({}, rest), {}, {\n    stiffness: stiffnessFromOrigamiValue(bouncyTension),\n    damping: dampingFromOrigamiValue(bouncyFriction)\n  });\n}\nfunction makeDefaultConfig() {\n  return {\n    stiffness: new AnimatedValue(100),\n    mass: new AnimatedValue(1),\n    damping: new AnimatedValue(10),\n    overshootClamping: false,\n    restSpeedThreshold: 0.001,\n    restDisplacementThreshold: 0.001,\n    toValue: new AnimatedValue(0)\n  };\n}\nexport default {\n  makeDefaultConfig: makeDefaultConfig,\n  makeConfigFromBouncinessAndSpeed: makeConfigFromBouncinessAndSpeed,\n  makeConfigFromOrigamiTensionAndFriction: makeConfigFromOrigamiTensionAndFriction\n};","map":{"version":3,"names":["cond","sub","divide","multiply","add","pow","lessOrEq","and","greaterThan","AnimatedValue","stiffnessFromOrigamiValue","oValue","dampingFromOrigamiValue","stiffnessFromOrigamiNode","dampingFromOrigamiNode","makeConfigFromOrigamiTensionAndFriction","prevConfig","tension","friction","rest","stiffness","damping","makeConfigFromBouncinessAndSpeed","bounciness","speed","fromBouncinessAndSpeedNumbers","fromBouncinessAndSpeedNodes","normalize","value","startValue","endValue","projectNormal","n","start","end","linearInterpolation","t","quadraticOutInterpolation","b3Friction1","x","b3Friction2","b3Friction3","b3Nobounce","b","s","bouncyTension","bouncyFriction","Math","makeDefaultConfig","mass","overshootClamping","restSpeedThreshold","restDisplacementThreshold","toValue"],"sources":["/Users/jeko/Documents/Reactive-4twiggers-animation/node_modules/react-native-reanimated/lib/reanimated1/animations/SpringUtils.js"],"sourcesContent":["import {\n  cond,\n  sub,\n  divide,\n  multiply,\n  add,\n  pow,\n  lessOrEq,\n  and,\n  greaterThan,\n} from './../base';\nimport AnimatedValue from './../core/InternalAnimatedValue';\n\nfunction stiffnessFromOrigamiValue(oValue) {\n  return (oValue - 30) * 3.62 + 194;\n}\n\nfunction dampingFromOrigamiValue(oValue) {\n  return (oValue - 8) * 3 + 25;\n}\n\nfunction stiffnessFromOrigamiNode(oValue) {\n  return add(multiply(sub(oValue, 30), 3.62), 194);\n}\n\nfunction dampingFromOrigamiNode(oValue) {\n  return add(multiply(sub(oValue, 8), 3), 25);\n}\n\nfunction makeConfigFromOrigamiTensionAndFriction(prevConfig) {\n  const { tension, friction, ...rest } = prevConfig;\n  return {\n    ...rest,\n    stiffness:\n      typeof tension === 'number'\n        ? stiffnessFromOrigamiValue(tension)\n        : stiffnessFromOrigamiNode(tension),\n    damping:\n      typeof friction === 'number'\n        ? dampingFromOrigamiValue(friction)\n        : dampingFromOrigamiNode(friction),\n  };\n}\n\nfunction makeConfigFromBouncinessAndSpeed(prevConfig) {\n  const { bounciness, speed, ...rest } = prevConfig;\n  if (typeof bounciness === 'number' && typeof speed === 'number') {\n    return fromBouncinessAndSpeedNumbers(bounciness, speed, rest);\n  }\n  return fromBouncinessAndSpeedNodes(bounciness, speed, rest);\n}\n\nfunction fromBouncinessAndSpeedNodes(bounciness, speed, rest) {\n  function normalize(value, startValue, endValue) {\n    return divide(sub(value, startValue), sub(endValue, startValue));\n  }\n\n  function projectNormal(n, start, end) {\n    return add(start, multiply(n, sub(end, start)));\n  }\n\n  function linearInterpolation(t, start, end) {\n    return add(multiply(t, end), multiply(sub(1, t), start));\n  }\n\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(sub(multiply(2, t), multiply(t, t)), start, end);\n  }\n\n  function b3Friction1(x) {\n    return add(\n      sub(multiply(0.0007, pow(x, 3)), multiply(0.031, pow(x, 2))),\n      multiply(0.64, x),\n      1.28\n    );\n  }\n\n  function b3Friction2(x) {\n    return add(\n      sub(multiply(0.000044, pow(x, 3)), multiply(0.006, pow(x, 2))),\n      multiply(0.36, x),\n      2\n    );\n  }\n\n  function b3Friction3(x) {\n    return add(\n      sub(multiply(0.00000045, pow(x, 3)), multiply(0.000332, pow(x, 2))),\n      multiply(0.1078, x),\n      5.84\n    );\n  }\n\n  function b3Nobounce(tension) {\n    return cond(\n      lessOrEq(tension, 18),\n      b3Friction1(tension),\n      cond(\n        and(greaterThan(tension, 18), lessOrEq(tension, 44)),\n        b3Friction2(tension),\n        b3Friction3(tension)\n      )\n    );\n  }\n\n  let b = normalize(divide(bounciness, 1.7), 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  const s = normalize(divide(speed, 1.7), 0, 20);\n  const bouncyTension = projectNormal(s, 0.5, 200);\n  const bouncyFriction = quadraticOutInterpolation(\n    b,\n    b3Nobounce(bouncyTension),\n    0.01\n  );\n  return {\n    ...rest,\n    stiffness: stiffnessFromOrigamiNode(bouncyTension),\n    damping: dampingFromOrigamiNode(bouncyFriction),\n  };\n}\n\nfunction fromBouncinessAndSpeedNumbers(bounciness, speed, rest) {\n  function normalize(value, startValue, endValue) {\n    return (value - startValue) / (endValue - startValue);\n  }\n\n  function projectNormal(n, start, end) {\n    return start + n * (end - start);\n  }\n\n  function linearInterpolation(t, start, end) {\n    return t * end + (1 - t) * start;\n  }\n\n  function quadraticOutInterpolation(t, start, end) {\n    return linearInterpolation(2 * t - t * t, start, end);\n  }\n\n  function b3Friction1(x) {\n    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;\n  }\n\n  function b3Friction2(x) {\n    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;\n  }\n\n  function b3Friction3(x) {\n    return (\n      0.00000045 * Math.pow(x, 3) -\n      0.000332 * Math.pow(x, 2) +\n      0.1078 * x +\n      5.84\n    );\n  }\n\n  function b3Nobounce(tension) {\n    if (tension <= 18) {\n      return b3Friction1(tension);\n    } else if (tension > 18 && tension <= 44) {\n      return b3Friction2(tension);\n    } else {\n      return b3Friction3(tension);\n    }\n  }\n\n  let b = normalize(bounciness / 1.7, 0, 20);\n  b = projectNormal(b, 0, 0.8);\n  const s = normalize(speed / 1.7, 0, 20);\n  const bouncyTension = projectNormal(s, 0.5, 200);\n  const bouncyFriction = quadraticOutInterpolation(\n    b,\n    b3Nobounce(bouncyTension),\n    0.01\n  );\n\n  return {\n    ...rest,\n    stiffness: stiffnessFromOrigamiValue(bouncyTension),\n    damping: dampingFromOrigamiValue(bouncyFriction),\n  };\n}\n\nfunction makeDefaultConfig() {\n  return {\n    stiffness: new AnimatedValue(100),\n    mass: new AnimatedValue(1),\n    damping: new AnimatedValue(10),\n    overshootClamping: false,\n    restSpeedThreshold: 0.001,\n    restDisplacementThreshold: 0.001,\n    toValue: new AnimatedValue(0),\n  };\n}\n\nexport default {\n  makeDefaultConfig,\n  makeConfigFromBouncinessAndSpeed,\n  makeConfigFromOrigamiTensionAndFriction,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}