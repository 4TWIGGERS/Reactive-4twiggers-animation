{"ast":null,"code":"import { EventEmitter } from \"../EventEmitter\";\nimport Platform from \"../Platform\";\nimport { CodedError } from \"../errors/CodedError\";\nimport NativeErrorManager from \"./NativeErrorManager\";\nif (__DEV__ && Platform.OS === 'android' && NativeErrorManager) {\n  var onNewException = 'ExpoModulesCoreErrorManager.onNewException';\n  var eventEmitter = new EventEmitter(NativeErrorManager);\n  eventEmitter.addListener(onNewException, function (_ref) {\n    var message = _ref.message;\n    console.error(message);\n  });\n}\nglobal.ExpoModulesCore_CodedError = CodedError;","map":{"version":3,"sources":["../../src/sweet/setUpErrorManager.fx.ts"],"names":[],"mappings":"AAAA,SAAS,YAAY;AACrB,OAAO,QAAQ;AACf,SAAS,UAAU;AACnB,OAAO,kBAAkB;AAEzB,IAAI,OAAO,IAAI,QAAQ,CAAC,EAAE,KAAK,SAAS,IAAI,kBAAkB,EAAE;EAC9D,IAAM,cAAc,GAAG,4CAA4C;EACnE,IAAM,YAAY,GAAG,IAAI,YAAY,CAAC,kBAAkB,CAAC;EAEzD,YAAY,CAAC,WAAW,CAAC,cAAc,EAAE,gBAAqC;IAAA,IAAlC,OAAO,QAAP,OAAO;IACjD,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC;EACxB,CAAC,CAAC;AACH;AAGD,MAAM,CAAC,0BAA0B,GAAG,UAAU","sourcesContent":["import { EventEmitter } from '../EventEmitter';\nimport Platform from '../Platform';\nimport { CodedError } from '../errors/CodedError';\nimport NativeErrorManager from './NativeErrorManager';\n\nif (__DEV__ && Platform.OS === 'android' && NativeErrorManager) {\n  const onNewException = 'ExpoModulesCoreErrorManager.onNewException';\n  const eventEmitter = new EventEmitter(NativeErrorManager);\n\n  eventEmitter.addListener(onNewException, ({ message }: { message: string }) => {\n    console.error(message);\n  });\n}\n\n// We have to export `CodedError` via global object to use in later in the C++ code.\nglobal.ExpoModulesCore_CodedError = CodedError;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}